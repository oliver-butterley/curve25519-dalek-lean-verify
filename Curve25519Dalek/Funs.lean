-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [curve25519_dalek]: function definitions
import Aeneas
import Curve25519Dalek.Types
import Curve25519Dalek.FunsExternal
open Aeneas.Std Result Error
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace curve25519_dalek

/- Trait implementation: [subtle::{core::convert::From<subtle::Choice> for bool}]
   Source: '/home/oliver/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/src/lib.rs', lines 138:0-138:26
   Name pattern: [core::convert::From<bool, subtle::Choice>] -/
@[reducible]
def core.convert.FromBoolsubtleChoice : core.convert.From Bool subtle.Choice
  := {
  from_ := subtle.FromBoolsubtleChoice.from
}

/- Trait implementation: [subtle::{core::ops::bit::BitAnd<subtle::Choice, subtle::Choice> for subtle::Choice}]
   Source: '/home/oliver/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/src/lib.rs', lines 159:0-159:22
   Name pattern: [core::ops::bit::BitAnd<subtle::Choice, subtle::Choice, subtle::Choice>] -/
@[reducible]
def core.ops.bit.BitAndsubtleChoicesubtleChoicesubtleChoice :
  core.ops.bit.BitAnd subtle.Choice subtle.Choice subtle.Choice := {
  bitand := subtle.BitAndsubtleChoicesubtleChoicesubtleChoice.bitand
}

/- Trait implementation: [subtle::{core::ops::bit::BitOr<subtle::Choice, subtle::Choice> for subtle::Choice}]
   Source: '/home/oliver/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/src/lib.rs', lines 174:0-174:21
   Name pattern: [core::ops::bit::BitOr<subtle::Choice, subtle::Choice, subtle::Choice>] -/
@[reducible]
def core.ops.bit.BitOrsubtleChoicesubtleChoicesubtleChoice : core.ops.bit.BitOr
  subtle.Choice subtle.Choice subtle.Choice := {
  bitor := subtle.BitOrsubtleChoicesubtleChoicesubtleChoice.bitor
}

/- Trait implementation: [subtle::{core::convert::From<u8> for subtle::Choice}]
   Source: '/home/oliver/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/src/lib.rs', lines 236:0-236:24
   Name pattern: [core::convert::From<subtle::Choice, u8>] -/
@[reducible]
def core.convert.FromsubtleChoiceU8 : core.convert.From subtle.Choice U8 := {
  from_ := subtle.FromsubtleChoiceU8.from
}

/- Trait implementation: [subtle::{subtle::ConstantTimeEq for @Slice<T>}]
   Source: '/home/oliver/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/src/lib.rs', lines 289:0-289:46
   Name pattern: [subtle::ConstantTimeEq<[@T]>] -/
@[reducible]
noncomputable def subtle.ConstantTimeEqSlice {T : Type} (ConstantTimeEqInst :
  subtle.ConstantTimeEq T) : subtle.ConstantTimeEq (Slice T) := {
  ct_eq := subtle.ConstantTimeEqSlice.ct_eq ConstantTimeEqInst
}

/- Trait implementation: [subtle::{subtle::ConstantTimeEq for u8}]
   Source: '/home/oliver/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/src/lib.rs', lines 346:8-346:36
   Name pattern: [subtle::ConstantTimeEq<u8>] -/
@[reducible]
def subtle.ConstantTimeEqU8 : subtle.ConstantTimeEq U8 := {
  ct_eq := subtle.ConstantTimeEqU8.ct_eq
}

/- Trait implementation: [subtle::{subtle::ConditionallySelectable for u64}]
   Source: '/home/oliver/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/src/lib.rs', lines 511:8-537:10
   Name pattern: [subtle::ConditionallySelectable<u64>] -/
@[reducible]
def subtle.ConditionallySelectableU64 : subtle.ConditionallySelectable U64 := {
  coremarkerCopyInst := core.marker.CopyU64
  conditional_select := subtle.ConditionallySelectableU64.conditional_select
  conditional_assign := subtle.ConditionallySelectableU64.conditional_assign
  conditional_swap := subtle.ConditionallySelectableU64.conditional_swap
}

/- Trait implementation: [subtle::{subtle::ConditionallyNegatable for T}]
   Source: '/home/oliver/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/subtle-2.6.1/src/lib.rs', lines 614:0-617:35
   Name pattern: [subtle::ConditionallyNegatable<@T>] -/
@[reducible]
def subtle.ConditionallyNegatable.Blanket {T : Type}
  (ConditionallySelectableInst : subtle.ConditionallySelectable T)
  (coreopsarithNeg_TTInst : core.ops.arith.Neg T T) :
  subtle.ConditionallyNegatable T := {
  conditional_negate :=
    subtle.ConditionallyNegatable.Blanket.conditional_negate
    ConditionallySelectableInst coreopsarithNeg_TTInst
}

/- [curve25519_dalek::backend::serial::u64::field::{core::ops::arith::Mul<&'a (curve25519_dalek::backend::serial::u64::field::FieldElement51), curve25519_dalek::backend::serial::u64::field::FieldElement51> for &1 (curve25519_dalek::backend::serial::u64::field::FieldElement51)}::mul::m]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 99:8-99:66 -/
def
  backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
  (x : U64) (y : U64) : Result U128 :=
  do
  let i ← (↑(UScalar.cast .U128 x) : Result U128)
  let i1 ← (↑(UScalar.cast .U128 y) : Result U128)
  i * i1

/- [curve25519_dalek::backend::serial::u64::field::{core::ops::arith::Mul<&'a (curve25519_dalek::backend::serial::u64::field::FieldElement51), curve25519_dalek::backend::serial::u64::field::FieldElement51> for &1 (curve25519_dalek::backend::serial::u64::field::FieldElement51)}::mul::LOW_51_BIT_MASK]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 152:8-152:54 -/
@[global_simps]
def
  backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.LOW_51_BIT_MASK_body
  : Result U64 :=
  do
  let i ← 1#u64 <<< 51#i32
  i - 1#u64
@[global_simps, irreducible]
def
  backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.LOW_51_BIT_MASK
  : U64 :=
  eval_global
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.LOW_51_BIT_MASK_body

/- [curve25519_dalek::backend::serial::u64::field::{core::ops::arith::Mul<&'a (curve25519_dalek::backend::serial::u64::field::FieldElement51), curve25519_dalek::backend::serial::u64::field::FieldElement51> for &1 (curve25519_dalek::backend::serial::u64::field::FieldElement51)}::mul]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 95:4-193:5 -/
def
  backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
  (self : backend.serial.u64.field.FieldElement51)
  (_rhs : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let i ← Array.index_usize _rhs 1#usize
  let b1_19 ← i * 19#u64
  let i1 ← Array.index_usize _rhs 2#usize
  let b2_19 ← i1 * 19#u64
  let i2 ← Array.index_usize _rhs 3#usize
  let b3_19 ← i2 * 19#u64
  let i3 ← Array.index_usize _rhs 4#usize
  let b4_19 ← i3 * 19#u64
  let i4 ← Array.index_usize self 0#usize
  let i5 ← Array.index_usize _rhs 0#usize
  let i6 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i4 i5
  let i7 ← Array.index_usize self 4#usize
  let i8 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i7 b1_19
  let i9 ← i6 + i8
  let i10 ← Array.index_usize self 3#usize
  let i11 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i10 b2_19
  let i12 ← i9 + i11
  let i13 ← Array.index_usize self 2#usize
  let i14 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i13 b3_19
  let i15 ← i12 + i14
  let i16 ← Array.index_usize self 1#usize
  let i17 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i16 b4_19
  let c0 ← i15 + i17
  let i18 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i16 i5
  let i19 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i4 i
  let i20 ← i18 + i19
  let i21 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i7 b2_19
  let i22 ← i20 + i21
  let i23 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i10 b3_19
  let i24 ← i22 + i23
  let i25 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i13 b4_19
  let c1 ← i24 + i25
  let i26 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i13 i5
  let i27 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i16 i
  let i28 ← i26 + i27
  let i29 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i4 i1
  let i30 ← i28 + i29
  let i31 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i7 b3_19
  let i32 ← i30 + i31
  let i33 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i10 b4_19
  let c2 ← i32 + i33
  let i34 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i10 i5
  let i35 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i13 i
  let i36 ← i34 + i35
  let i37 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i16 i1
  let i38 ← i36 + i37
  let i39 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i4 i2
  let i40 ← i38 + i39
  let i41 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i7 b4_19
  let c3 ← i40 + i41
  let i42 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i7 i5
  let i43 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i10 i
  let i44 ← i42 + i43
  let i45 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i13 i1
  let i46 ← i44 + i45
  let i47 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i16 i2
  let i48 ← i46 + i47
  let i49 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.m
      i4 i3
  let c4 ← i48 + i49
  let i50 ← 1#u64 <<< 54#i32
  massert (i4 < i50)
  massert (i5 < i50)
  massert (i16 < i50)
  massert (i < i50)
  massert (i13 < i50)
  massert (i1 < i50)
  massert (i10 < i50)
  massert (i2 < i50)
  massert (i7 < i50)
  massert (i3 < i50)
  let out := Array.repeat 5#usize 0#u64
  let i51 ← c0 >>> 51#i32
  let i52 ← (↑(UScalar.cast .U64 i51) : Result U64)
  let i53 ← (↑(UScalar.cast .U128 i52) : Result U128)
  let c11 ← c1 + i53
  let i54 ← (↑(UScalar.cast .U64 c0) : Result U64)
  let i55 ←
    (↑(i54 &&&
      backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.LOW_51_BIT_MASK)
      : Result U64)
  let out1 ← Array.update out 0#usize i55
  let i56 ← c11 >>> 51#i32
  let i57 ← (↑(UScalar.cast .U64 i56) : Result U64)
  let i58 ← (↑(UScalar.cast .U128 i57) : Result U128)
  let c21 ← c2 + i58
  let i59 ← (↑(UScalar.cast .U64 c11) : Result U64)
  let i60 ←
    (↑(i59 &&&
      backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.LOW_51_BIT_MASK)
      : Result U64)
  let out2 ← Array.update out1 1#usize i60
  let i61 ← c21 >>> 51#i32
  let i62 ← (↑(UScalar.cast .U64 i61) : Result U64)
  let i63 ← (↑(UScalar.cast .U128 i62) : Result U128)
  let c31 ← c3 + i63
  let i64 ← (↑(UScalar.cast .U64 c21) : Result U64)
  let i65 ←
    (↑(i64 &&&
      backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.LOW_51_BIT_MASK)
      : Result U64)
  let out3 ← Array.update out2 2#usize i65
  let i66 ← c31 >>> 51#i32
  let i67 ← (↑(UScalar.cast .U64 i66) : Result U64)
  let i68 ← (↑(UScalar.cast .U128 i67) : Result U128)
  let c41 ← c4 + i68
  let i69 ← (↑(UScalar.cast .U64 c31) : Result U64)
  let i70 ←
    (↑(i69 &&&
      backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.LOW_51_BIT_MASK)
      : Result U64)
  let out4 ← Array.update out3 3#usize i70
  let i71 ← c41 >>> 51#i32
  let carry ← (↑(UScalar.cast .U64 i71) : Result U64)
  let i72 ← (↑(UScalar.cast .U64 c41) : Result U64)
  let i73 ←
    (↑(i72 &&&
      backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.LOW_51_BIT_MASK)
      : Result U64)
  let out5 ← Array.update out4 4#usize i73
  let i74 ← carry * 19#u64
  let i75 ← Array.index_usize out5 0#usize
  let i76 ← i75 + i74
  let out6 ← Array.update out5 0#usize i76
  let i77 ← Array.index_usize out6 0#usize
  let i78 ← i77 >>> 51#i32
  let i79 ← Array.index_usize out6 1#usize
  let i80 ← i79 + i78
  let out7 ← Array.update out6 1#usize i80
  let i81 ← Array.index_usize out7 0#usize
  let i82 ←
    (↑(i81 &&&
      backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul.LOW_51_BIT_MASK)
      : Result U64)
  let out8 ← Array.update out7 0#usize i82
  ok out8

/- [curve25519_dalek::backend::serial::curve_models::{curve25519_dalek::backend::serial::curve_models::CompletedPoint}::as_projective]:
   Source: 'curve25519-dalek/src/backend/serial/curve_models/mod.rs', lines 356:4-362:5 -/
def backend.serial.curve_models.CompletedPoint.as_projective
  (self : backend.serial.curve_models.CompletedPoint) :
  Result backend.serial.curve_models.ProjectivePoint
  :=
  do
  let fe ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      self.X self.T
  let fe1 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      self.Y self.Z
  let fe2 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      self.Z self.T
  ok { X := fe, Y := fe1, Z := fe2 }

/- [curve25519_dalek::backend::serial::curve_models::{curve25519_dalek::backend::serial::curve_models::CompletedPoint}::as_extended]:
   Source: 'curve25519-dalek/src/backend/serial/curve_models/mod.rs', lines 368:4-375:5 -/
def backend.serial.curve_models.CompletedPoint.as_extended
  (self : backend.serial.curve_models.CompletedPoint) :
  Result edwards.EdwardsPoint
  :=
  do
  let fe ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      self.X self.T
  let fe1 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      self.Y self.Z
  let fe2 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      self.Z self.T
  let fe3 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      self.X self.Y
  ok { X := fe, Y := fe1, Z := fe2, T := fe3 }

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::pow2k::m]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 488:8-490:9 -/
def backend.serial.u64.field.FieldElement51.pow2k.m
  (x : U64) (y : U64) : Result U128 :=
  do
  let i ← (↑(UScalar.cast .U128 x) : Result U128)
  let i1 ← (↑(UScalar.cast .U128 y) : Result U128)
  i * i1

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::pow2k::LOW_51_BIT_MASK]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 539:12-539:58 -/
@[global_simps]
def backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK_body
  : Result U64 :=
  do
  let i ← 1#u64 <<< 51#i32
  i - 1#u64
@[global_simps, irreducible]
def backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK : U64 :=
  eval_global
    backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK_body

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::pow2k]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 508:16-520:86 -/
def backend.serial.u64.field.FieldElement51.pow2k_loop
  (k : U32) (a : Array U64 5#usize) : Result (Array U64 5#usize) :=
  do
  let i ← Array.index_usize a 3#usize
  let a3_19 ← 19#u64 * i
  let i1 ← Array.index_usize a 4#usize
  let a4_19 ← 19#u64 * i1
  let i2 ← Array.index_usize a 0#usize
  let i3 ← backend.serial.u64.field.FieldElement51.pow2k.m i2 i2
  let i4 ← Array.index_usize a 1#usize
  let i5 ← backend.serial.u64.field.FieldElement51.pow2k.m i4 a4_19
  let i6 ← Array.index_usize a 2#usize
  let i7 ← backend.serial.u64.field.FieldElement51.pow2k.m i6 a3_19
  let i8 ← i5 + i7
  let i9 ← 2#u128 * i8
  let c0 ← i3 + i9
  let i10 ← backend.serial.u64.field.FieldElement51.pow2k.m i a3_19
  let i11 ← backend.serial.u64.field.FieldElement51.pow2k.m i2 i4
  let i12 ← backend.serial.u64.field.FieldElement51.pow2k.m i6 a4_19
  let i13 ← i11 + i12
  let i14 ← 2#u128 * i13
  let c1 ← i10 + i14
  let i15 ← backend.serial.u64.field.FieldElement51.pow2k.m i4 i4
  let i16 ← backend.serial.u64.field.FieldElement51.pow2k.m i2 i6
  let i17 ← backend.serial.u64.field.FieldElement51.pow2k.m i1 a3_19
  let i18 ← i16 + i17
  let i19 ← 2#u128 * i18
  let c2 ← i15 + i19
  let i20 ← backend.serial.u64.field.FieldElement51.pow2k.m i1 a4_19
  let i21 ← backend.serial.u64.field.FieldElement51.pow2k.m i2 i
  let i22 ← backend.serial.u64.field.FieldElement51.pow2k.m i4 i6
  let i23 ← i21 + i22
  let i24 ← 2#u128 * i23
  let c3 ← i20 + i24
  let i25 ← backend.serial.u64.field.FieldElement51.pow2k.m i6 i6
  let i26 ← backend.serial.u64.field.FieldElement51.pow2k.m i2 i1
  let i27 ← backend.serial.u64.field.FieldElement51.pow2k.m i4 i
  let i28 ← i26 + i27
  let i29 ← 2#u128 * i28
  let c4 ← i25 + i29
  let i30 ← 1#u64 <<< 54#i32
  if i2 < i30
  then
    if i4 < i30
    then
      if i6 < i30
      then
        if i < i30
        then
          if i1 < i30
          then
            do
            let i31 ← c0 >>> 51#i32
            let i32 ← (↑(UScalar.cast .U64 i31) : Result U64)
            let i33 ← (↑(UScalar.cast .U128 i32) : Result U128)
            let c11 ← c1 + i33
            let i34 ← (↑(UScalar.cast .U64 c0) : Result U64)
            let i35 ←
              (↑(i34 &&&
                backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK)
                : Result U64)
            let a1 ← Array.update a 0#usize i35
            let i36 ← c11 >>> 51#i32
            let i37 ← (↑(UScalar.cast .U64 i36) : Result U64)
            let i38 ← (↑(UScalar.cast .U128 i37) : Result U128)
            let c21 ← c2 + i38
            let i39 ← (↑(UScalar.cast .U64 c11) : Result U64)
            let i40 ←
              (↑(i39 &&&
                backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK)
                : Result U64)
            let a2 ← Array.update a1 1#usize i40
            let i41 ← c21 >>> 51#i32
            let i42 ← (↑(UScalar.cast .U64 i41) : Result U64)
            let i43 ← (↑(UScalar.cast .U128 i42) : Result U128)
            let c31 ← c3 + i43
            let i44 ← (↑(UScalar.cast .U64 c21) : Result U64)
            let i45 ←
              (↑(i44 &&&
                backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK)
                : Result U64)
            let a3 ← Array.update a2 2#usize i45
            let i46 ← c31 >>> 51#i32
            let i47 ← (↑(UScalar.cast .U64 i46) : Result U64)
            let i48 ← (↑(UScalar.cast .U128 i47) : Result U128)
            let c41 ← c4 + i48
            let i49 ← (↑(UScalar.cast .U64 c31) : Result U64)
            let i50 ←
              (↑(i49 &&&
                backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK)
                : Result U64)
            let a4 ← Array.update a3 3#usize i50
            let i51 ← c41 >>> 51#i32
            let carry ← (↑(UScalar.cast .U64 i51) : Result U64)
            let i52 ← (↑(UScalar.cast .U64 c41) : Result U64)
            let i53 ←
              (↑(i52 &&&
                backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK)
                : Result U64)
            let a5 ← Array.update a4 4#usize i53
            let i54 ← carry * 19#u64
            let i55 ← Array.index_usize a5 0#usize
            let i56 ← i55 + i54
            let a6 ← Array.update a5 0#usize i56
            let i57 ← Array.index_usize a6 0#usize
            let i58 ← i57 >>> 51#i32
            let i59 ← Array.index_usize a6 1#usize
            let i60 ← i59 + i58
            let a7 ← Array.update a6 1#usize i60
            let i61 ← Array.index_usize a7 0#usize
            let i62 ←
              (↑(i61 &&&
                backend.serial.u64.field.FieldElement51.pow2k.LOW_51_BIT_MASK)
                : Result U64)
            let (_, index_mut_back) ← Array.index_mut_usize a7 0#usize
            let k1 ← k - 1#u32
            if k1 = 0#u32
            then ok (index_mut_back i62)
            else
              let a8 := index_mut_back i62
              backend.serial.u64.field.FieldElement51.pow2k_loop k1 a8
          else fail panic
        else fail panic
      else fail panic
    else fail panic
  else fail panic
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::pow2k]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 482:4-587:5 -/
def backend.serial.u64.field.FieldElement51.pow2k
  (self : backend.serial.u64.field.FieldElement51) (k : U32) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  massert (k > 0#u32)
  let a ← backend.serial.u64.field.FieldElement51.pow2k_loop k self
  ok a

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::square]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 590:4-592:5 -/
def backend.serial.u64.field.FieldElement51.square
  (self : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  backend.serial.u64.field.FieldElement51.pow2k self 1#u32

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::square2]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 598:8-601:9 -/
def backend.serial.u64.field.FieldElement51.square2_loop
  (square : backend.serial.u64.field.FieldElement51) (i : Usize) :
  Result backend.serial.u64.field.FieldElement51
  :=
  if i < 5#usize
  then
    do
    let i1 ← Array.index_usize square i
    let i2 ← i1 * 2#u64
    let a ← Array.update square i i2
    let i3 ← i + 1#usize
    backend.serial.u64.field.FieldElement51.square2_loop a i3
  else ok square
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::square2]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 595:4-604:5 -/
def backend.serial.u64.field.FieldElement51.square2
  (self : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let square ← backend.serial.u64.field.FieldElement51.pow2k self 1#u32
  backend.serial.u64.field.FieldElement51.square2_loop square 0#usize

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::add_assign]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 278:8-281:9 -/
def backend.serial.u64.field.FieldElement51.add_assign_loop
  (a : backend.serial.u64.field.FieldElement51)
  (b : backend.serial.u64.field.FieldElement51) (i : Usize) :
  Result backend.serial.u64.field.FieldElement51
  :=
  if i < 5#usize
  then
    do
    let i1 ← Array.index_usize b i
    let i2 ← Array.index_usize a i
    let i3 ← i2 + i1
    let a1 ← Array.update a i i3
    let i4 ← i + 1#usize
    backend.serial.u64.field.FieldElement51.add_assign_loop a1 b i4
  else ok a
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::add_assign]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 276:4-282:5 -/
@[reducible]
def backend.serial.u64.field.FieldElement51.add_assign
  (a : backend.serial.u64.field.FieldElement51)
  (b : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  backend.serial.u64.field.FieldElement51.add_assign_loop a b 0#usize

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::add]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 269:4-273:5 -/
def backend.serial.u64.field.FieldElement51.add
  (a : backend.serial.u64.field.FieldElement51)
  (b : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  backend.serial.u64.field.FieldElement51.add_assign a b

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::reduce::LOW_51_BIT_MASK]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 313:8-313:54 -/
@[global_simps]
def backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK_body
  : Result U64 :=
  do
  let i ← 1#u64 <<< 51#i32
  i - 1#u64
@[global_simps, irreducible]
def backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK : U64 :=
  eval_global
    backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK_body

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::reduce]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 312:4-345:5 -/
def backend.serial.u64.field.FieldElement51.reduce
  (limbs : Array U64 5#usize) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let i ← Array.index_usize limbs 0#usize
  let c0 ← i >>> 51#i32
  let i1 ← Array.index_usize limbs 1#usize
  let c1 ← i1 >>> 51#i32
  let i2 ← Array.index_usize limbs 2#usize
  let c2 ← i2 >>> 51#i32
  let i3 ← Array.index_usize limbs 3#usize
  let c3 ← i3 >>> 51#i32
  let i4 ← Array.index_usize limbs 4#usize
  let c4 ← i4 >>> 51#i32
  let i5 ←
    (↑(i &&& backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK)
      : Result U64)
  let limbs1 ← Array.update limbs 0#usize i5
  let i6 ← Array.index_usize limbs1 1#usize
  let i7 ←
    (↑(i6 &&& backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK)
      : Result U64)
  let limbs2 ← Array.update limbs1 1#usize i7
  let i8 ← Array.index_usize limbs2 2#usize
  let i9 ←
    (↑(i8 &&& backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK)
      : Result U64)
  let limbs3 ← Array.update limbs2 2#usize i9
  let i10 ← Array.index_usize limbs3 3#usize
  let i11 ←
    (↑(i10 &&&
      backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK) : Result
      U64)
  let limbs4 ← Array.update limbs3 3#usize i11
  let i12 ← Array.index_usize limbs4 4#usize
  let i13 ←
    (↑(i12 &&&
      backend.serial.u64.field.FieldElement51.reduce.LOW_51_BIT_MASK) : Result
      U64)
  let limbs5 ← Array.update limbs4 4#usize i13
  let i14 ← c4 * 19#u64
  let i15 ← Array.index_usize limbs5 0#usize
  let i16 ← i15 + i14
  let limbs6 ← Array.update limbs5 0#usize i16
  let i17 ← Array.index_usize limbs6 1#usize
  let i18 ← i17 + c0
  let limbs7 ← Array.update limbs6 1#usize i18
  let i19 ← Array.index_usize limbs7 2#usize
  let i20 ← i19 + c1
  let limbs8 ← Array.update limbs7 2#usize i20
  let i21 ← Array.index_usize limbs8 3#usize
  let i22 ← i21 + c2
  let limbs9 ← Array.update limbs8 3#usize i22
  let i23 ← Array.index_usize limbs9 4#usize
  let i24 ← i23 + c3
  let limbs10 ← Array.update limbs9 4#usize i24
  ok limbs10

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::sub]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 285:4-302:5 -/
def backend.serial.u64.field.FieldElement51.sub
  (a : backend.serial.u64.field.FieldElement51)
  (b : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let i ← Array.index_usize a 0#usize
  let i1 ← i + 36028797018963664#u64
  let i2 ← Array.index_usize b 0#usize
  let i3 ← i1 - i2
  let i4 ← Array.index_usize a 1#usize
  let i5 ← i4 + 36028797018963952#u64
  let i6 ← Array.index_usize b 1#usize
  let i7 ← i5 - i6
  let i8 ← Array.index_usize a 2#usize
  let i9 ← i8 + 36028797018963952#u64
  let i10 ← Array.index_usize b 2#usize
  let i11 ← i9 - i10
  let i12 ← Array.index_usize a 3#usize
  let i13 ← i12 + 36028797018963952#u64
  let i14 ← Array.index_usize b 3#usize
  let i15 ← i13 - i14
  let i16 ← Array.index_usize a 4#usize
  let i17 ← i16 + 36028797018963952#u64
  let i18 ← Array.index_usize b 4#usize
  let i19 ← i17 - i18
  backend.serial.u64.field.FieldElement51.reduce
    (Array.make 5#usize [ i3, i7, i11, i15, i19 ])

/- [curve25519_dalek::backend::serial::curve_models::{curve25519_dalek::backend::serial::curve_models::ProjectivePoint}::double]:
   Source: 'curve25519-dalek/src/backend/serial/curve_models/mod.rs', lines 384:4-419:5 -/
def backend.serial.curve_models.ProjectivePoint.double
  (self : backend.serial.curve_models.ProjectivePoint) :
  Result backend.serial.curve_models.CompletedPoint
  :=
  do
  let XX ← backend.serial.u64.field.FieldElement51.square self.X
  let YY ← backend.serial.u64.field.FieldElement51.square self.Y
  let ZZ2 ← backend.serial.u64.field.FieldElement51.square2 self.Z
  let X_plus_Y ← backend.serial.u64.field.FieldElement51.add self.X self.Y
  let X_plus_Y_sq ← backend.serial.u64.field.FieldElement51.square X_plus_Y
  let YY_plus_XX ← backend.serial.u64.field.FieldElement51.add YY XX
  let YY_minus_XX ← backend.serial.u64.field.FieldElement51.sub YY XX
  let fe ← backend.serial.u64.field.FieldElement51.sub X_plus_Y_sq YY_plus_XX
  let fe1 ← backend.serial.u64.field.FieldElement51.sub ZZ2 YY_minus_XX
  ok { X := fe, Y := YY_plus_XX, Z := YY_minus_XX, T := fe1 }

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::from_limbs]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 238:4-240:5 -/
def backend.serial.u64.field.FieldElement51.from_limbs
  (limbs : Array U64 5#usize) :
  Result backend.serial.u64.field.FieldElement51
  :=
  ok limbs

/- [curve25519_dalek::backend::serial::u64::constants::EDWARDS_D]
   Source: 'curve25519-dalek/src/backend/serial/u64/constants.rs', lines 45:0-51:3 -/
@[global_simps]
def backend.serial.u64.constants.EDWARDS_D_body
  : Result backend.serial.u64.field.FieldElement51 :=
  backend.serial.u64.field.FieldElement51.from_limbs
    (Array.make 5#usize [
      929955233495203#u64, 466365720129213#u64, 1662059464998953#u64,
      2033849074728123#u64, 1442794654840575#u64
      ])
@[global_simps, irreducible]
def backend.serial.u64.constants.EDWARDS_D
  : backend.serial.u64.field.FieldElement51 :=
  eval_global backend.serial.u64.constants.EDWARDS_D_body

/- [curve25519_dalek::backend::serial::u64::constants::SQRT_M1]
   Source: 'curve25519-dalek/src/backend/serial/u64/constants.rs', lines 99:0-105:3 -/
@[global_simps]
def backend.serial.u64.constants.SQRT_M1_body
  : Result backend.serial.u64.field.FieldElement51 :=
  backend.serial.u64.field.FieldElement51.from_limbs
    (Array.make 5#usize [
      1718705420411056#u64, 234908883556509#u64, 2233514472574048#u64,
      2117202627021982#u64, 765476049583133#u64
      ])
@[global_simps, irreducible]
def backend.serial.u64.constants.SQRT_M1
  : backend.serial.u64.field.FieldElement51 :=
  eval_global backend.serial.u64.constants.SQRT_M1_body

/- [curve25519_dalek::backend::serial::u64::constants::L]
   Source: 'curve25519-dalek/src/backend/serial/u64/constants.rs', lines 127:0-133:3 -/
@[global_simps]
def backend.serial.u64.constants.L_body
  : Result backend.serial.u64.scalar.Scalar52 :=
  ok
    (Array.make 5#usize [
      671914833335277#u64, 3916664325105025#u64, 1367801#u64, 0#u64,
      17592186044416#u64
      ])
@[global_simps, irreducible]
def backend.serial.u64.constants.L : backend.serial.u64.scalar.Scalar52 :=
  eval_global backend.serial.u64.constants.L_body

/- [curve25519_dalek::backend::serial::u64::constants::LFACTOR]
   Source: 'curve25519-dalek/src/backend/serial/u64/constants.rs', lines 136:0-136:48 -/
@[global_simps]
def backend.serial.u64.constants.LFACTOR_body : Result U64 :=
  ok 1439961107955227#u64
@[global_simps, irreducible]
def backend.serial.u64.constants.LFACTOR : U64 :=
  eval_global backend.serial.u64.constants.LFACTOR_body

/- [curve25519_dalek::backend::serial::u64::constants::R]
   Source: 'curve25519-dalek/src/backend/serial/u64/constants.rs', lines 139:0-145:3 -/
@[global_simps]
def backend.serial.u64.constants.R_body
  : Result backend.serial.u64.scalar.Scalar52 :=
  ok
    (Array.make 5#usize [
      4302102966953709#u64, 1049714374468698#u64, 4503599278581019#u64,
      4503599627370495#u64, 17592186044415#u64
      ])
@[global_simps, irreducible]
def backend.serial.u64.constants.R : backend.serial.u64.scalar.Scalar52 :=
  eval_global backend.serial.u64.constants.R_body

/- [curve25519_dalek::backend::serial::u64::constants::RR]
   Source: 'curve25519-dalek/src/backend/serial/u64/constants.rs', lines 148:0-154:3 -/
@[global_simps]
def backend.serial.u64.constants.RR_body
  : Result backend.serial.u64.scalar.Scalar52 :=
  ok
    (Array.make 5#usize [
      2764609938444603#u64, 3768881411696287#u64, 1616719297148420#u64,
      1087343033131391#u64, 10175238647962#u64
      ])
@[global_simps, irreducible]
def backend.serial.u64.constants.RR : backend.serial.u64.scalar.Scalar52 :=
  eval_global backend.serial.u64.constants.RR_body

/- [curve25519_dalek::backend::serial::u64::field::{core::clone::Clone for curve25519_dalek::backend::serial::u64::field::FieldElement51}::clone]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 42:15-42:20 -/
def
  backend.serial.u64.field.Clonecurve25519_dalekbackendserialu64fieldFieldElement51.clone
  (self : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  ok self

/- Trait implementation: [curve25519_dalek::backend::serial::u64::field::{core::clone::Clone for curve25519_dalek::backend::serial::u64::field::FieldElement51}]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 42:15-42:20 -/
@[reducible]
def core.clone.Clonecurve25519_dalekbackendserialu64fieldFieldElement51 :
  core.clone.Clone backend.serial.u64.field.FieldElement51 := {
  clone :=
    backend.serial.u64.field.Clonecurve25519_dalekbackendserialu64fieldFieldElement51.clone
}

/- Trait implementation: [curve25519_dalek::backend::serial::u64::field::{core::marker::Copy for curve25519_dalek::backend::serial::u64::field::FieldElement51}]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 42:9-42:13 -/
@[reducible]
def core.marker.Copycurve25519_dalekbackendserialu64fieldFieldElement51 :
  core.marker.Copy backend.serial.u64.field.FieldElement51 := {
  cloneInst :=
    core.clone.Clonecurve25519_dalekbackendserialu64fieldFieldElement51
}

/- [curve25519_dalek::backend::serial::u64::field::{core::ops::arith::Add<&'a (curve25519_dalek::backend::serial::u64::field::FieldElement51), curve25519_dalek::backend::serial::u64::field::FieldElement51> for &1 (curve25519_dalek::backend::serial::u64::field::FieldElement51)}::add]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 66:4-68:5 -/
def
  backend.serial.u64.field.Add0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.add
  (self : backend.serial.u64.field.FieldElement51)
  (_rhs : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  backend.serial.u64.field.FieldElement51.add self _rhs

/- Trait implementation: [curve25519_dalek::backend::serial::u64::field::{core::ops::arith::Add<&'a (curve25519_dalek::backend::serial::u64::field::FieldElement51), curve25519_dalek::backend::serial::u64::field::FieldElement51> for &1 (curve25519_dalek::backend::serial::u64::field::FieldElement51)}]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 64:0-69:1 -/
@[reducible]
def
  core.ops.arith.Add0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51
  : core.ops.arith.Add backend.serial.u64.field.FieldElement51
  backend.serial.u64.field.FieldElement51
  backend.serial.u64.field.FieldElement51 := {
  add :=
    backend.serial.u64.field.Add0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.add
}

/- [curve25519_dalek::backend::serial::u64::field::{core::ops::arith::Sub<&'a (curve25519_dalek::backend::serial::u64::field::FieldElement51), curve25519_dalek::backend::serial::u64::field::FieldElement51> for &1 (curve25519_dalek::backend::serial::u64::field::FieldElement51)}::sub]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 79:4-81:5 -/
def
  backend.serial.u64.field.Sub_0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.sub
  (self : backend.serial.u64.field.FieldElement51)
  (_rhs : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  backend.serial.u64.field.FieldElement51.sub self _rhs

/- Trait implementation: [curve25519_dalek::backend::serial::u64::field::{core::ops::arith::Sub<&'a (curve25519_dalek::backend::serial::u64::field::FieldElement51), curve25519_dalek::backend::serial::u64::field::FieldElement51> for &1 (curve25519_dalek::backend::serial::u64::field::FieldElement51)}]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 77:0-82:1 -/
@[reducible]
def
  core.ops.arith.Sub_0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51
  : core.ops.arith.Sub backend.serial.u64.field.FieldElement51
  backend.serial.u64.field.FieldElement51
  backend.serial.u64.field.FieldElement51 := {
  sub :=
    backend.serial.u64.field.Sub_0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.sub
}

/- Trait implementation: [curve25519_dalek::backend::serial::u64::field::{core::ops::arith::Mul<&'a (curve25519_dalek::backend::serial::u64::field::FieldElement51), curve25519_dalek::backend::serial::u64::field::FieldElement51> for &1 (curve25519_dalek::backend::serial::u64::field::FieldElement51)}]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 91:0-194:1 -/
@[reducible]
def
  core.ops.arith.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51
  : core.ops.arith.Mul backend.serial.u64.field.FieldElement51
  backend.serial.u64.field.FieldElement51
  backend.serial.u64.field.FieldElement51 := {
  mul :=
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
}

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::negate]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 256:4-266:5 -/
def backend.serial.u64.field.FieldElement51.negate
  (self : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let i ← Array.index_usize self 0#usize
  let i1 ← 36028797018963664#u64 - i
  let i2 ← Array.index_usize self 1#usize
  let i3 ← 36028797018963952#u64 - i2
  let i4 ← Array.index_usize self 2#usize
  let i5 ← 36028797018963952#u64 - i4
  let i6 ← Array.index_usize self 3#usize
  let i7 ← 36028797018963952#u64 - i6
  let i8 ← Array.index_usize self 4#usize
  let i9 ← 36028797018963952#u64 - i8
  let neg ←
    backend.serial.u64.field.FieldElement51.reduce
      (Array.make 5#usize [ i1, i3, i5, i7, i9 ])
  ok neg

/- [curve25519_dalek::backend::serial::u64::field::{core::ops::arith::Neg<curve25519_dalek::backend::serial::u64::field::FieldElement51> for &0 (curve25519_dalek::backend::serial::u64::field::FieldElement51)}::neg]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 198:4-202:5 -/
def
  backend.serial.u64.field.Neg_0_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.neg
  (self : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  backend.serial.u64.field.FieldElement51.negate self

/- Trait implementation: [curve25519_dalek::backend::serial::u64::field::{core::ops::arith::Neg<curve25519_dalek::backend::serial::u64::field::FieldElement51> for &0 (curve25519_dalek::backend::serial::u64::field::FieldElement51)}]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 196:0-203:1 -/
@[reducible]
def
  core.ops.arith.Neg_0_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51
  : core.ops.arith.Neg backend.serial.u64.field.FieldElement51
  backend.serial.u64.field.FieldElement51 := {
  neg :=
    backend.serial.u64.field.Neg_0_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.neg
}

/- [curve25519_dalek::backend::serial::u64::field::{subtle::ConditionallySelectable for curve25519_dalek::backend::serial::u64::field::FieldElement51}::conditional_select]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 206:4-218:5 -/
def
  backend.serial.u64.field.ConditionallySelectablecurve25519_dalekbackendserialu64fieldFieldElement51.conditional_select
  (a : backend.serial.u64.field.FieldElement51)
  (b : backend.serial.u64.field.FieldElement51) (choice : subtle.Choice) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let i ← Array.index_usize a 0#usize
  let i1 ← Array.index_usize b 0#usize
  let i2 ← subtle.ConditionallySelectableU64.conditional_select i i1 choice
  let i3 ← Array.index_usize a 1#usize
  let i4 ← Array.index_usize b 1#usize
  let i5 ← subtle.ConditionallySelectableU64.conditional_select i3 i4 choice
  let i6 ← Array.index_usize a 2#usize
  let i7 ← Array.index_usize b 2#usize
  let i8 ← subtle.ConditionallySelectableU64.conditional_select i6 i7 choice
  let i9 ← Array.index_usize a 3#usize
  let i10 ← Array.index_usize b 3#usize
  let i11 ←
    subtle.ConditionallySelectableU64.conditional_select i9 i10 choice
  let i12 ← Array.index_usize a 4#usize
  let i13 ← Array.index_usize b 4#usize
  let i14 ←
    subtle.ConditionallySelectableU64.conditional_select i12 i13 choice
  ok (Array.make 5#usize [ i2, i5, i8, i11, i14 ])

/- [curve25519_dalek::backend::serial::u64::field::{subtle::ConditionallySelectable for curve25519_dalek::backend::serial::u64::field::FieldElement51}::conditional_assign]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 228:4-234:5 -/
def
  backend.serial.u64.field.ConditionallySelectablecurve25519_dalekbackendserialu64fieldFieldElement51.conditional_assign
  (self : backend.serial.u64.field.FieldElement51)
  (other : backend.serial.u64.field.FieldElement51) (choice : subtle.Choice) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let (i, index_mut_back) ← Array.index_mut_usize self 0#usize
  let i1 ← Array.index_usize other 0#usize
  let i2 ← subtle.ConditionallySelectableU64.conditional_assign i i1 choice
  let a := index_mut_back i2
  let (i3, index_mut_back1) ← Array.index_mut_usize a 1#usize
  let i4 ← Array.index_usize other 1#usize
  let i5 ← subtle.ConditionallySelectableU64.conditional_assign i3 i4 choice
  let a1 := index_mut_back1 i5
  let (i6, index_mut_back2) ← Array.index_mut_usize a1 2#usize
  let i7 ← Array.index_usize other 2#usize
  let i8 ← subtle.ConditionallySelectableU64.conditional_assign i6 i7 choice
  let a2 := index_mut_back2 i8
  let (i9, index_mut_back3) ← Array.index_mut_usize a2 3#usize
  let i10 ← Array.index_usize other 3#usize
  let i11 ←
    subtle.ConditionallySelectableU64.conditional_assign i9 i10 choice
  let a3 := index_mut_back3 i11
  let (i12, index_mut_back4) ← Array.index_mut_usize a3 4#usize
  let i13 ← Array.index_usize other 4#usize
  let i14 ←
    subtle.ConditionallySelectableU64.conditional_assign i12 i13 choice
  let a4 := index_mut_back4 i14
  ok a4

/- [curve25519_dalek::backend::serial::u64::field::{subtle::ConditionallySelectable for curve25519_dalek::backend::serial::u64::field::FieldElement51}::conditional_swap]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 220:4-226:5 -/
def
  backend.serial.u64.field.ConditionallySelectablecurve25519_dalekbackendserialu64fieldFieldElement51.conditional_swap
  (a : backend.serial.u64.field.FieldElement51)
  (b : backend.serial.u64.field.FieldElement51) (choice : subtle.Choice) :
  Result (backend.serial.u64.field.FieldElement51 ×
    backend.serial.u64.field.FieldElement51)
  :=
  do
  let (i, index_mut_back) ← Array.index_mut_usize a 0#usize
  let (i1, index_mut_back1) ← Array.index_mut_usize b 0#usize
  let (i2, i3) ←
    subtle.ConditionallySelectableU64.conditional_swap i i1 choice
  let a1 := index_mut_back i2
  let (i4, index_mut_back2) ← Array.index_mut_usize a1 1#usize
  let a2 := index_mut_back1 i3
  let (i5, index_mut_back3) ← Array.index_mut_usize a2 1#usize
  let (i6, i7) ←
    subtle.ConditionallySelectableU64.conditional_swap i4 i5 choice
  let a3 := index_mut_back2 i6
  let (i8, index_mut_back4) ← Array.index_mut_usize a3 2#usize
  let a4 := index_mut_back3 i7
  let (i9, index_mut_back5) ← Array.index_mut_usize a4 2#usize
  let (i10, i11) ←
    subtle.ConditionallySelectableU64.conditional_swap i8 i9 choice
  let a5 := index_mut_back4 i10
  let (i12, index_mut_back6) ← Array.index_mut_usize a5 3#usize
  let a6 := index_mut_back5 i11
  let (i13, index_mut_back7) ← Array.index_mut_usize a6 3#usize
  let (i14, i15) ←
    subtle.ConditionallySelectableU64.conditional_swap i12 i13 choice
  let a7 := index_mut_back6 i14
  let (i16, index_mut_back8) ← Array.index_mut_usize a7 4#usize
  let a8 := index_mut_back7 i15
  let (i17, index_mut_back9) ← Array.index_mut_usize a8 4#usize
  let (i18, i19) ←
    subtle.ConditionallySelectableU64.conditional_swap i16 i17 choice
  let a9 := index_mut_back8 i18
  let a10 := index_mut_back9 i19
  ok (a9, a10)

/- Trait implementation: [curve25519_dalek::backend::serial::u64::field::{subtle::ConditionallySelectable for curve25519_dalek::backend::serial::u64::field::FieldElement51}]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 205:0-235:1 -/
@[reducible]
def
  subtle.ConditionallySelectablecurve25519_dalekbackendserialu64fieldFieldElement51
  : subtle.ConditionallySelectable backend.serial.u64.field.FieldElement51 := {
  coremarkerCopyInst :=
    core.marker.Copycurve25519_dalekbackendserialu64fieldFieldElement51
  conditional_select :=
    backend.serial.u64.field.ConditionallySelectablecurve25519_dalekbackendserialu64fieldFieldElement51.conditional_select
  conditional_assign :=
    backend.serial.u64.field.ConditionallySelectablecurve25519_dalekbackendserialu64fieldFieldElement51.conditional_assign
  conditional_swap :=
    backend.serial.u64.field.ConditionallySelectablecurve25519_dalekbackendserialu64fieldFieldElement51.conditional_swap
}

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::ONE]
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 245:4-245:80 -/
@[global_simps]
def backend.serial.u64.field.FieldElement51.ONE_body
  : Result backend.serial.u64.field.FieldElement51 :=
  backend.serial.u64.field.FieldElement51.from_limbs
    (Array.make 5#usize [ 1#u64, 0#u64, 0#u64, 0#u64, 0#u64 ])
@[global_simps, irreducible]
def backend.serial.u64.field.FieldElement51.ONE
  : backend.serial.u64.field.FieldElement51 :=
  eval_global backend.serial.u64.field.FieldElement51.ONE_body

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::sub_assign]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 305:4-308:5 -/
def backend.serial.u64.field.FieldElement51.sub_assign
  (a : backend.serial.u64.field.FieldElement51)
  (b : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let result ← backend.serial.u64.field.FieldElement51.sub a b
  ok result

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::from_bytes::load8_at]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 361:8-370:9 -/
def backend.serial.u64.field.FieldElement51.from_bytes.load8_at
  (input : Slice U8) (i : Usize) : Result U64 :=
  do
  let i1 ← Slice.index_usize input i
  let i2 ← (↑(UScalar.cast .U64 i1) : Result U64)
  let i3 ← i + 1#usize
  let i4 ← Slice.index_usize input i3
  let i5 ← (↑(UScalar.cast .U64 i4) : Result U64)
  let i6 ← i5 <<< 8#i32
  let i7 ← (↑(i2 ||| i6) : Result U64)
  let i8 ← i + 2#usize
  let i9 ← Slice.index_usize input i8
  let i10 ← (↑(UScalar.cast .U64 i9) : Result U64)
  let i11 ← i10 <<< 16#i32
  let i12 ← (↑(i7 ||| i11) : Result U64)
  let i13 ← i + 3#usize
  let i14 ← Slice.index_usize input i13
  let i15 ← (↑(UScalar.cast .U64 i14) : Result U64)
  let i16 ← i15 <<< 24#i32
  let i17 ← (↑(i12 ||| i16) : Result U64)
  let i18 ← i + 4#usize
  let i19 ← Slice.index_usize input i18
  let i20 ← (↑(UScalar.cast .U64 i19) : Result U64)
  let i21 ← i20 <<< 32#i32
  let i22 ← (↑(i17 ||| i21) : Result U64)
  let i23 ← i + 5#usize
  let i24 ← Slice.index_usize input i23
  let i25 ← (↑(UScalar.cast .U64 i24) : Result U64)
  let i26 ← i25 <<< 40#i32
  let i27 ← (↑(i22 ||| i26) : Result U64)
  let i28 ← i + 6#usize
  let i29 ← Slice.index_usize input i28
  let i30 ← (↑(UScalar.cast .U64 i29) : Result U64)
  let i31 ← i30 <<< 48#i32
  let i32 ← (↑(i27 ||| i31) : Result U64)
  let i33 ← i + 7#usize
  let i34 ← Slice.index_usize input i33
  let i35 ← (↑(UScalar.cast .U64 i34) : Result U64)
  let i36 ← i35 <<< 56#i32
  ok (i32 ||| i36)

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::from_bytes]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 360:4-385:5 -/
def backend.serial.u64.field.FieldElement51.from_bytes
  (bytes : Array U8 32#usize) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let i ← 1#u64 <<< 51#i32
  let low_51_bit_mask ← i - 1#u64
  let s ← (↑(Array.to_slice bytes) : Result (Slice U8))
  let i1 ←
    backend.serial.u64.field.FieldElement51.from_bytes.load8_at s 0#usize
  let i2 ← (↑(i1 &&& low_51_bit_mask) : Result U64)
  let s1 ← (↑(Array.to_slice bytes) : Result (Slice U8))
  let i3 ←
    backend.serial.u64.field.FieldElement51.from_bytes.load8_at s1 6#usize
  let i4 ← i3 >>> 3#i32
  let i5 ← (↑(i4 &&& low_51_bit_mask) : Result U64)
  let s2 ← (↑(Array.to_slice bytes) : Result (Slice U8))
  let i6 ←
    backend.serial.u64.field.FieldElement51.from_bytes.load8_at s2 12#usize
  let i7 ← i6 >>> 6#i32
  let i8 ← (↑(i7 &&& low_51_bit_mask) : Result U64)
  let s3 ← (↑(Array.to_slice bytes) : Result (Slice U8))
  let i9 ←
    backend.serial.u64.field.FieldElement51.from_bytes.load8_at s3 19#usize
  let i10 ← i9 >>> 1#i32
  let i11 ← (↑(i10 &&& low_51_bit_mask) : Result U64)
  let s4 ← (↑(Array.to_slice bytes) : Result (Slice U8))
  let i12 ←
    backend.serial.u64.field.FieldElement51.from_bytes.load8_at s4 24#usize
  let i13 ← i12 >>> 12#i32
  let i14 ← (↑(i13 &&& low_51_bit_mask) : Result U64)
  ok (Array.make 5#usize [ i2, i5, i8, i11, i14 ])

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::to_bytes]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 396:4-478:5 -/
def backend.serial.u64.field.FieldElement51.to_bytes
  (self : backend.serial.u64.field.FieldElement51) :
  Result (Array U8 32#usize)
  :=
  do
  let fe ← backend.serial.u64.field.FieldElement51.reduce self
  let i ← Array.index_usize fe 0#usize
  let i1 ← i + 19#u64
  let q ← i1 >>> 51#i32
  let i2 ← Array.index_usize fe 1#usize
  let i3 ← i2 + q
  let q1 ← i3 >>> 51#i32
  let i4 ← Array.index_usize fe 2#usize
  let i5 ← i4 + q1
  let q2 ← i5 >>> 51#i32
  let i6 ← Array.index_usize fe 3#usize
  let i7 ← i6 + q2
  let q3 ← i7 >>> 51#i32
  let i8 ← Array.index_usize fe 4#usize
  let i9 ← i8 + q3
  let q4 ← i9 >>> 51#i32
  let i10 ← 19#u64 * q4
  let i11 ← i + i10
  let limbs ← Array.update fe 0#usize i11
  let i12 ← 1#u64 <<< 51#i32
  let low_51_bit_mask ← i12 - 1#u64
  let i13 ← Array.index_usize limbs 0#usize
  let i14 ← i13 >>> 51#i32
  let i15 ← Array.index_usize limbs 1#usize
  let i16 ← i15 + i14
  let limbs1 ← Array.update limbs 1#usize i16
  let i17 ← Array.index_usize limbs1 0#usize
  let i18 ← (↑(i17 &&& low_51_bit_mask) : Result U64)
  let limbs2 ← Array.update limbs1 0#usize i18
  let i19 ← Array.index_usize limbs2 1#usize
  let i20 ← i19 >>> 51#i32
  let i21 ← Array.index_usize limbs2 2#usize
  let i22 ← i21 + i20
  let limbs3 ← Array.update limbs2 2#usize i22
  let i23 ← Array.index_usize limbs3 1#usize
  let i24 ← (↑(i23 &&& low_51_bit_mask) : Result U64)
  let limbs4 ← Array.update limbs3 1#usize i24
  let i25 ← Array.index_usize limbs4 2#usize
  let i26 ← i25 >>> 51#i32
  let i27 ← Array.index_usize limbs4 3#usize
  let i28 ← i27 + i26
  let limbs5 ← Array.update limbs4 3#usize i28
  let i29 ← Array.index_usize limbs5 2#usize
  let i30 ← (↑(i29 &&& low_51_bit_mask) : Result U64)
  let limbs6 ← Array.update limbs5 2#usize i30
  let i31 ← Array.index_usize limbs6 3#usize
  let i32 ← i31 >>> 51#i32
  let i33 ← Array.index_usize limbs6 4#usize
  let i34 ← i33 + i32
  let limbs7 ← Array.update limbs6 4#usize i34
  let i35 ← Array.index_usize limbs7 3#usize
  let i36 ← (↑(i35 &&& low_51_bit_mask) : Result U64)
  let limbs8 ← Array.update limbs7 3#usize i36
  let i37 ← Array.index_usize limbs8 4#usize
  let i38 ← (↑(i37 &&& low_51_bit_mask) : Result U64)
  let limbs9 ← Array.update limbs8 4#usize i38
  let s := Array.repeat 32#usize 0#u8
  let i39 ← Array.index_usize limbs9 0#usize
  let i40 ← (↑(UScalar.cast .U8 i39) : Result U8)
  let s1 ← Array.update s 0#usize i40
  let i41 ← i39 >>> 8#i32
  let i42 ← (↑(UScalar.cast .U8 i41) : Result U8)
  let s2 ← Array.update s1 1#usize i42
  let i43 ← i39 >>> 16#i32
  let i44 ← (↑(UScalar.cast .U8 i43) : Result U8)
  let s3 ← Array.update s2 2#usize i44
  let i45 ← i39 >>> 24#i32
  let i46 ← (↑(UScalar.cast .U8 i45) : Result U8)
  let s4 ← Array.update s3 3#usize i46
  let i47 ← i39 >>> 32#i32
  let i48 ← (↑(UScalar.cast .U8 i47) : Result U8)
  let s5 ← Array.update s4 4#usize i48
  let i49 ← i39 >>> 40#i32
  let i50 ← (↑(UScalar.cast .U8 i49) : Result U8)
  let s6 ← Array.update s5 5#usize i50
  let i51 ← i39 >>> 48#i32
  let i52 ← Array.index_usize limbs9 1#usize
  let i53 ← i52 <<< 3#i32
  let i54 ← (↑(i51 ||| i53) : Result U64)
  let i55 ← (↑(UScalar.cast .U8 i54) : Result U8)
  let s7 ← Array.update s6 6#usize i55
  let i56 ← i52 >>> 5#i32
  let i57 ← (↑(UScalar.cast .U8 i56) : Result U8)
  let s8 ← Array.update s7 7#usize i57
  let i58 ← i52 >>> 13#i32
  let i59 ← (↑(UScalar.cast .U8 i58) : Result U8)
  let s9 ← Array.update s8 8#usize i59
  let i60 ← i52 >>> 21#i32
  let i61 ← (↑(UScalar.cast .U8 i60) : Result U8)
  let s10 ← Array.update s9 9#usize i61
  let i62 ← i52 >>> 29#i32
  let i63 ← (↑(UScalar.cast .U8 i62) : Result U8)
  let s11 ← Array.update s10 10#usize i63
  let i64 ← i52 >>> 37#i32
  let i65 ← (↑(UScalar.cast .U8 i64) : Result U8)
  let s12 ← Array.update s11 11#usize i65
  let i66 ← i52 >>> 45#i32
  let i67 ← Array.index_usize limbs9 2#usize
  let i68 ← i67 <<< 6#i32
  let i69 ← (↑(i66 ||| i68) : Result U64)
  let i70 ← (↑(UScalar.cast .U8 i69) : Result U8)
  let s13 ← Array.update s12 12#usize i70
  let i71 ← i67 >>> 2#i32
  let i72 ← (↑(UScalar.cast .U8 i71) : Result U8)
  let s14 ← Array.update s13 13#usize i72
  let i73 ← i67 >>> 10#i32
  let i74 ← (↑(UScalar.cast .U8 i73) : Result U8)
  let s15 ← Array.update s14 14#usize i74
  let i75 ← i67 >>> 18#i32
  let i76 ← (↑(UScalar.cast .U8 i75) : Result U8)
  let s16 ← Array.update s15 15#usize i76
  let i77 ← i67 >>> 26#i32
  let i78 ← (↑(UScalar.cast .U8 i77) : Result U8)
  let s17 ← Array.update s16 16#usize i78
  let i79 ← i67 >>> 34#i32
  let i80 ← (↑(UScalar.cast .U8 i79) : Result U8)
  let s18 ← Array.update s17 17#usize i80
  let i81 ← i67 >>> 42#i32
  let i82 ← (↑(UScalar.cast .U8 i81) : Result U8)
  let s19 ← Array.update s18 18#usize i82
  let i83 ← i67 >>> 50#i32
  let i84 ← Array.index_usize limbs9 3#usize
  let i85 ← i84 <<< 1#i32
  let i86 ← (↑(i83 ||| i85) : Result U64)
  let i87 ← (↑(UScalar.cast .U8 i86) : Result U8)
  let s20 ← Array.update s19 19#usize i87
  let i88 ← i84 >>> 7#i32
  let i89 ← (↑(UScalar.cast .U8 i88) : Result U8)
  let s21 ← Array.update s20 20#usize i89
  let i90 ← i84 >>> 15#i32
  let i91 ← (↑(UScalar.cast .U8 i90) : Result U8)
  let s22 ← Array.update s21 21#usize i91
  let i92 ← i84 >>> 23#i32
  let i93 ← (↑(UScalar.cast .U8 i92) : Result U8)
  let s23 ← Array.update s22 22#usize i93
  let i94 ← i84 >>> 31#i32
  let i95 ← (↑(UScalar.cast .U8 i94) : Result U8)
  let s24 ← Array.update s23 23#usize i95
  let i96 ← i84 >>> 39#i32
  let i97 ← (↑(UScalar.cast .U8 i96) : Result U8)
  let s25 ← Array.update s24 24#usize i97
  let i98 ← i84 >>> 47#i32
  let i99 ← Array.index_usize limbs9 4#usize
  let i100 ← i99 <<< 4#i32
  let i101 ← (↑(i98 ||| i100) : Result U64)
  let i102 ← (↑(UScalar.cast .U8 i101) : Result U8)
  let s26 ← Array.update s25 25#usize i102
  let i103 ← i99 >>> 4#i32
  let i104 ← (↑(UScalar.cast .U8 i103) : Result U8)
  let s27 ← Array.update s26 26#usize i104
  let i105 ← i99 >>> 12#i32
  let i106 ← (↑(UScalar.cast .U8 i105) : Result U8)
  let s28 ← Array.update s27 27#usize i106
  let i107 ← i99 >>> 20#i32
  let i108 ← (↑(UScalar.cast .U8 i107) : Result U8)
  let s29 ← Array.update s28 28#usize i108
  let i109 ← i99 >>> 28#i32
  let i110 ← (↑(UScalar.cast .U8 i109) : Result U8)
  let s30 ← Array.update s29 29#usize i110
  let i111 ← i99 >>> 36#i32
  let i112 ← (↑(UScalar.cast .U8 i111) : Result U8)
  let s31 ← Array.update s30 30#usize i112
  let i113 ← i99 >>> 44#i32
  let i114 ← (↑(UScalar.cast .U8 i113) : Result U8)
  let s32 ← Array.update s31 31#usize i114
  let i115 ← Array.index_usize s32 31#usize
  let i116 ← (↑(i115 &&& 128#u8) : Result U8)
  massert (i116 = 0#u8)
  ok s32

/- [curve25519_dalek::backend::serial::u64::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::as_bytes]:
   Source: 'curve25519-dalek/src/backend/serial/u64/field.rs', lines 389:4-391:5 -/
def backend.serial.u64.field.FieldElement51.as_bytes
  (self : backend.serial.u64.field.FieldElement51) :
  Result (Array U8 32#usize)
  :=
  backend.serial.u64.field.FieldElement51.to_bytes self

/- [curve25519_dalek::backend::serial::u64::scalar::{core::ops::index::Index<usize, u64> for curve25519_dalek::backend::serial::u64::scalar::Scalar52}::index]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 43:4-45:5 -/
def
  backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
  (self : backend.serial.u64.scalar.Scalar52) (_index : Usize) : Result U64 :=
  Array.index_usize self _index

/- Trait implementation: [curve25519_dalek::backend::serial::u64::scalar::{core::ops::index::Index<usize, u64> for curve25519_dalek::backend::serial::u64::scalar::Scalar52}]
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 41:0-46:1 -/
@[reducible]
def core.ops.index.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64
  : core.ops.index.Index backend.serial.u64.scalar.Scalar52 Usize U64 := {
  index :=
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
}

/- [curve25519_dalek::backend::serial::u64::scalar::{core::ops::index::IndexMut<usize, u64> for curve25519_dalek::backend::serial::u64::scalar::Scalar52}::index_mut]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 49:4-51:5 -/
def
  backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
  (self : backend.serial.u64.scalar.Scalar52) (_index : Usize) :
  Result (U64 × (U64 → backend.serial.u64.scalar.Scalar52))
  :=
  do
  let (i, index_mut_back) ← Array.index_mut_usize self _index
  let back := fun ret => let a := index_mut_back ret
                         a
  ok (i, back)

/- Trait implementation: [curve25519_dalek::backend::serial::u64::scalar::{core::ops::index::IndexMut<usize, u64> for curve25519_dalek::backend::serial::u64::scalar::Scalar52}]
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 48:0-52:1 -/
@[reducible]
def
  core.ops.index.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64
  : core.ops.index.IndexMut backend.serial.u64.scalar.Scalar52 Usize U64 := {
  indexInst :=
    core.ops.index.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64
  index_mut :=
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
}

/- [curve25519_dalek::backend::serial::u64::scalar::m]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 56:0-58:1 -/
def backend.serial.u64.scalar.m (x : U64) (y : U64) : Result U128 :=
  do
  let i ← (↑(UScalar.cast .U128 x) : Result U128)
  let i1 ← (↑(UScalar.cast .U128 y) : Result U128)
  i * i1

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::ZERO]
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 62:4-62:57 -/
@[global_simps]
def backend.serial.u64.scalar.Scalar52.ZERO_body
  : Result backend.serial.u64.scalar.Scalar52 :=
  let a := Array.repeat 5#usize 0#u64
  ok a
@[global_simps, irreducible]
def backend.serial.u64.scalar.Scalar52.ZERO
  : backend.serial.u64.scalar.Scalar52 :=
  eval_global backend.serial.u64.scalar.Scalar52.ZERO_body

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::from_bytes]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 69:8-80:9 -/
def backend.serial.u64.scalar.Scalar52.from_bytes_loop
  (bytes : Array U8 32#usize) (words : Array U64 4#usize) (i : Usize) :
  Result (Array U64 4#usize)
  :=
  if i < 4#usize
  then
    do
    let base ← i * 8#usize
    let i1 ← Array.index_usize bytes base
    let i2 ← (↑(UScalar.cast .U64 i1) : Result U64)
    let i3 ← base + 1#usize
    let i4 ← Array.index_usize bytes i3
    let i5 ← (↑(UScalar.cast .U64 i4) : Result U64)
    let i6 ← i5 <<< 8#i32
    let i7 ← (↑(i2 ||| i6) : Result U64)
    let i8 ← base + 2#usize
    let i9 ← Array.index_usize bytes i8
    let i10 ← (↑(UScalar.cast .U64 i9) : Result U64)
    let i11 ← i10 <<< 16#i32
    let i12 ← (↑(i7 ||| i11) : Result U64)
    let i13 ← base + 3#usize
    let i14 ← Array.index_usize bytes i13
    let i15 ← (↑(UScalar.cast .U64 i14) : Result U64)
    let i16 ← i15 <<< 24#i32
    let i17 ← (↑(i12 ||| i16) : Result U64)
    let i18 ← base + 4#usize
    let i19 ← Array.index_usize bytes i18
    let i20 ← (↑(UScalar.cast .U64 i19) : Result U64)
    let i21 ← i20 <<< 32#i32
    let i22 ← (↑(i17 ||| i21) : Result U64)
    let i23 ← base + 5#usize
    let i24 ← Array.index_usize bytes i23
    let i25 ← (↑(UScalar.cast .U64 i24) : Result U64)
    let i26 ← i25 <<< 40#i32
    let i27 ← (↑(i22 ||| i26) : Result U64)
    let i28 ← base + 6#usize
    let i29 ← Array.index_usize bytes i28
    let i30 ← (↑(UScalar.cast .U64 i29) : Result U64)
    let i31 ← i30 <<< 48#i32
    let i32 ← (↑(i27 ||| i31) : Result U64)
    let i33 ← base + 7#usize
    let i34 ← Array.index_usize bytes i33
    let i35 ← (↑(UScalar.cast .U64 i34) : Result U64)
    let i36 ← i35 <<< 56#i32
    let i37 ← (↑(i32 ||| i36) : Result U64)
    let words1 ← Array.update words i i37
    let i38 ← i + 1#usize
    backend.serial.u64.scalar.Scalar52.from_bytes_loop bytes words1 i38
  else ok words
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::from_bytes]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 66:4-93:5 -/
def backend.serial.u64.scalar.Scalar52.from_bytes
  (bytes : Array U8 32#usize) : Result backend.serial.u64.scalar.Scalar52 :=
  do
  let words := Array.repeat 4#usize 0#u64
  let words1 ←
    backend.serial.u64.scalar.Scalar52.from_bytes_loop bytes words 0#usize
  let i ← 1#u64 <<< 52#i32
  let mask ← i - 1#u64
  let i1 ← 1#u64 <<< 48#i32
  let top_mask ← i1 - 1#u64
  let i2 ← Array.index_usize words1 0#usize
  let (_, index_mut_back) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      backend.serial.u64.scalar.Scalar52.ZERO 0#usize
  let i3 ← (↑(i2 &&& mask) : Result U64)
  let i4 ← i2 >>> 52#i32
  let i5 ← Array.index_usize words1 1#usize
  let i6 ← i5 <<< 12#i32
  let i7 ← (↑(i4 ||| i6) : Result U64)
  let s := index_mut_back i3
  let (_, index_mut_back1) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      s 1#usize
  let i8 ← (↑(i7 &&& mask) : Result U64)
  let i9 ← i5 >>> 40#i32
  let i10 ← Array.index_usize words1 2#usize
  let i11 ← i10 <<< 24#i32
  let i12 ← (↑(i9 ||| i11) : Result U64)
  let s1 := index_mut_back1 i8
  let (_, index_mut_back2) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      s1 2#usize
  let i13 ← (↑(i12 &&& mask) : Result U64)
  let i14 ← i10 >>> 28#i32
  let i15 ← Array.index_usize words1 3#usize
  let i16 ← i15 <<< 36#i32
  let i17 ← (↑(i14 ||| i16) : Result U64)
  let s2 := index_mut_back2 i13
  let (_, index_mut_back3) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      s2 3#usize
  let i18 ← (↑(i17 &&& mask) : Result U64)
  let i19 ← i15 >>> 16#i32
  let s3 := index_mut_back3 i18
  let (_, index_mut_back4) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      s3 4#usize
  let i20 ← (↑(i19 &&& top_mask) : Result U64)
  ok (index_mut_back4 i20)

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::mul_internal]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 231:4-245:5 -/
def backend.serial.u64.scalar.Scalar52.mul_internal
  (a : backend.serial.u64.scalar.Scalar52)
  (b : backend.serial.u64.scalar.Scalar52) :
  Result (Array U128 9#usize)
  :=
  do
  let z := Array.repeat 9#usize 0#u128
  let i ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 0#usize
  let i1 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 0#usize
  let i2 ← backend.serial.u64.scalar.m i i1
  let z1 ← Array.update z 0#usize i2
  let i3 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 1#usize
  let i4 ← backend.serial.u64.scalar.m i i3
  let i5 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 1#usize
  let i6 ← backend.serial.u64.scalar.m i5 i1
  let i7 ← i4 + i6
  let z2 ← Array.update z1 1#usize i7
  let i8 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 2#usize
  let i9 ← backend.serial.u64.scalar.m i i8
  let i10 ← backend.serial.u64.scalar.m i5 i3
  let i11 ← i9 + i10
  let i12 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 2#usize
  let i13 ← backend.serial.u64.scalar.m i12 i1
  let i14 ← i11 + i13
  let z3 ← Array.update z2 2#usize i14
  let i15 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 3#usize
  let i16 ← backend.serial.u64.scalar.m i i15
  let i17 ← backend.serial.u64.scalar.m i5 i8
  let i18 ← i16 + i17
  let i19 ← backend.serial.u64.scalar.m i12 i3
  let i20 ← i18 + i19
  let i21 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 3#usize
  let i22 ← backend.serial.u64.scalar.m i21 i1
  let i23 ← i20 + i22
  let z4 ← Array.update z3 3#usize i23
  let i24 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      b 4#usize
  let i25 ← backend.serial.u64.scalar.m i i24
  let i26 ← backend.serial.u64.scalar.m i5 i15
  let i27 ← i25 + i26
  let i28 ← backend.serial.u64.scalar.m i12 i8
  let i29 ← i27 + i28
  let i30 ← backend.serial.u64.scalar.m i21 i3
  let i31 ← i29 + i30
  let i32 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 4#usize
  let i33 ← backend.serial.u64.scalar.m i32 i1
  let i34 ← i31 + i33
  let z5 ← Array.update z4 4#usize i34
  let i35 ← backend.serial.u64.scalar.m i5 i24
  let i36 ← backend.serial.u64.scalar.m i12 i15
  let i37 ← i35 + i36
  let i38 ← backend.serial.u64.scalar.m i21 i8
  let i39 ← i37 + i38
  let i40 ← backend.serial.u64.scalar.m i32 i3
  let i41 ← i39 + i40
  let z6 ← Array.update z5 5#usize i41
  let i42 ← backend.serial.u64.scalar.m i12 i24
  let i43 ← backend.serial.u64.scalar.m i21 i15
  let i44 ← i42 + i43
  let i45 ← backend.serial.u64.scalar.m i32 i8
  let i46 ← i44 + i45
  let z7 ← Array.update z6 6#usize i46
  let i47 ← backend.serial.u64.scalar.m i21 i24
  let i48 ← backend.serial.u64.scalar.m i32 i15
  let i49 ← i47 + i48
  let z8 ← Array.update z7 7#usize i49
  let i50 ← backend.serial.u64.scalar.m i32 i24
  Array.update z8 8#usize i50

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_reduce::part1]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 277:8-280:9 -/
def backend.serial.u64.scalar.Scalar52.montgomery_reduce.part1
  (sum : U128) : Result (U128 × U64) :=
  do
  let i ← (↑(UScalar.cast .U64 sum) : Result U64)
  let i1 ←
    (↑(core.num.U64.wrapping_mul i backend.serial.u64.constants.LFACTOR) :
      Result U64)
  let i2 ← 1#u64 <<< 52#i32
  let i3 ← i2 - 1#u64
  let p ← (↑(i1 &&& i3) : Result U64)
  let i4 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      backend.serial.u64.constants.L 0#usize
  let i5 ← backend.serial.u64.scalar.m p i4
  let i6 ← sum + i5
  let i7 ← i6 >>> 52#i32
  ok (i7, p)

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_reduce::part2]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 283:8-286:9 -/
def backend.serial.u64.scalar.Scalar52.montgomery_reduce.part2
  (sum : U128) : Result (U128 × U64) :=
  do
  let i ← (↑(UScalar.cast .U64 sum) : Result U64)
  let i1 ← 1#u64 <<< 52#i32
  let i2 ← i1 - 1#u64
  let w ← (↑(i &&& i2) : Result U64)
  let i3 ← sum >>> 52#i32
  ok (i3, w)

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::conditional_add_l]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 218:8-223:9 -/
def backend.serial.u64.scalar.Scalar52.conditional_add_l_loop
  (condition : subtle.Choice) (mask : U64)
  (self : backend.serial.u64.scalar.Scalar52) (carry : U64) (i : Usize) :
  Result (U64 × backend.serial.u64.scalar.Scalar52)
  :=
  if i < 5#usize
  then
    do
    let i1 ←
      backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
        backend.serial.u64.constants.L i
    let addend ←
      subtle.ConditionallySelectableU64.conditional_select 0#u64 i1 condition
    let i2 ← carry >>> 52#i32
    let i3 ←
      backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
        self i
    let i4 ← i2 + i3
    let carry1 ← i4 + addend
    let (_, index_mut_back) ←
      backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
        self i
    let i5 ← (↑(carry1 &&& mask) : Result U64)
    let i6 ← i + 1#usize
    let self1 := index_mut_back i5
    backend.serial.u64.scalar.Scalar52.conditional_add_l_loop condition mask
      self1 carry1 i6
  else ok (carry, self)
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::conditional_add_l]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 213:4-226:5 -/
def backend.serial.u64.scalar.Scalar52.conditional_add_l
  (self : backend.serial.u64.scalar.Scalar52) (condition : subtle.Choice) :
  Result (U64 × backend.serial.u64.scalar.Scalar52)
  :=
  do
  let i ← 1#u64 <<< 52#i32
  let mask ← i - 1#u64
  backend.serial.u64.scalar.Scalar52.conditional_add_l_loop condition mask self
    0#u64 0#usize

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::sub]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 202:8-206:9 -/
def backend.serial.u64.scalar.Scalar52.sub_loop
  (mask : U64) (a : backend.serial.u64.scalar.Scalar52)
  (b : backend.serial.u64.scalar.Scalar52)
  (difference : backend.serial.u64.scalar.Scalar52) (borrow : U64) (i : Usize)
  :
  Result (backend.serial.u64.scalar.Scalar52 × U64)
  :=
  if i < 5#usize
  then
    do
    let i1 ←
      backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
        a i
    let i2 ←
      backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
        b i
    let i3 ← borrow >>> 63#i32
    let i4 ← i2 + i3
    let borrow1 ← (↑(core.num.U64.wrapping_sub i1 i4) : Result U64)
    let (_, index_mut_back) ←
      backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
        difference i
    let i5 ← (↑(borrow1 &&& mask) : Result U64)
    let i6 ← i + 1#usize
    let difference1 := index_mut_back i5
    backend.serial.u64.scalar.Scalar52.sub_loop mask a b difference1 borrow1 i6
  else ok (difference, borrow)
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::sub]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 195:4-211:5 -/
def backend.serial.u64.scalar.Scalar52.sub
  (a : backend.serial.u64.scalar.Scalar52)
  (b : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  do
  let i ← 1#u64 <<< 52#i32
  let mask ← i - 1#u64
  let (difference, borrow) ←
    backend.serial.u64.scalar.Scalar52.sub_loop mask a b
      backend.serial.u64.scalar.Scalar52.ZERO 0#u64 0#usize
  let i1 ← borrow >>> 63#i32
  let i2 ← (↑(UScalar.cast .U8 i1) : Result U8)
  let c ← subtle.FromsubtleChoiceU8.from i2
  let (_, difference1) ←
    backend.serial.u64.scalar.Scalar52.conditional_add_l difference c
  ok difference1

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_reduce]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 274:4-307:5 -/
def backend.serial.u64.scalar.Scalar52.montgomery_reduce
  (limbs : Array U128 9#usize) : Result backend.serial.u64.scalar.Scalar52 :=
  do
  let i ← Array.index_usize limbs 0#usize
  let (carry, n0) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part1 i
  let i1 ← Array.index_usize limbs 1#usize
  let i2 ← carry + i1
  let i3 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      backend.serial.u64.constants.L 1#usize
  let i4 ← backend.serial.u64.scalar.m n0 i3
  let i5 ← i2 + i4
  let (carry1, n1) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part1 i5
  let i6 ← Array.index_usize limbs 2#usize
  let i7 ← carry1 + i6
  let i8 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      backend.serial.u64.constants.L 2#usize
  let i9 ← backend.serial.u64.scalar.m n0 i8
  let i10 ← i7 + i9
  let i11 ← backend.serial.u64.scalar.m n1 i3
  let i12 ← i10 + i11
  let (carry2, n2) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part1 i12
  let i13 ← Array.index_usize limbs 3#usize
  let i14 ← carry2 + i13
  let i15 ← backend.serial.u64.scalar.m n1 i8
  let i16 ← i14 + i15
  let i17 ← backend.serial.u64.scalar.m n2 i3
  let i18 ← i16 + i17
  let (carry3, n3) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part1 i18
  let i19 ← Array.index_usize limbs 4#usize
  let i20 ← carry3 + i19
  let i21 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      backend.serial.u64.constants.L 4#usize
  let i22 ← backend.serial.u64.scalar.m n0 i21
  let i23 ← i20 + i22
  let i24 ← backend.serial.u64.scalar.m n2 i8
  let i25 ← i23 + i24
  let i26 ← backend.serial.u64.scalar.m n3 i3
  let i27 ← i25 + i26
  let (carry4, n4) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part1 i27
  let i28 ← Array.index_usize limbs 5#usize
  let i29 ← carry4 + i28
  let i30 ← backend.serial.u64.scalar.m n1 i21
  let i31 ← i29 + i30
  let i32 ← backend.serial.u64.scalar.m n3 i8
  let i33 ← i31 + i32
  let i34 ← backend.serial.u64.scalar.m n4 i3
  let i35 ← i33 + i34
  let (carry5, r0) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part2 i35
  let i36 ← Array.index_usize limbs 6#usize
  let i37 ← carry5 + i36
  let i38 ← backend.serial.u64.scalar.m n2 i21
  let i39 ← i37 + i38
  let i40 ← backend.serial.u64.scalar.m n4 i8
  let i41 ← i39 + i40
  let (carry6, r1) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part2 i41
  let i42 ← Array.index_usize limbs 7#usize
  let i43 ← carry6 + i42
  let i44 ← backend.serial.u64.scalar.m n3 i21
  let i45 ← i43 + i44
  let (carry7, r2) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part2 i45
  let i46 ← Array.index_usize limbs 8#usize
  let i47 ← carry7 + i46
  let i48 ← backend.serial.u64.scalar.m n4 i21
  let i49 ← i47 + i48
  let (carry8, r3) ←
    backend.serial.u64.scalar.Scalar52.montgomery_reduce.part2 i49
  let r4 ← (↑(UScalar.cast .U64 carry8) : Result U64)
  backend.serial.u64.scalar.Scalar52.sub
    (Array.make 5#usize [ r0, r1, r2, r3, r4 ]) backend.serial.u64.constants.L

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_mul]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 326:4-328:5 -/
def backend.serial.u64.scalar.Scalar52.montgomery_mul
  (a : backend.serial.u64.scalar.Scalar52)
  (b : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  do
  let a1 ← backend.serial.u64.scalar.Scalar52.mul_internal a b
  backend.serial.u64.scalar.Scalar52.montgomery_reduce a1

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::add]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 184:8-188:9 -/
def backend.serial.u64.scalar.Scalar52.add_loop
  (mask : U64) (a : backend.serial.u64.scalar.Scalar52)
  (b : backend.serial.u64.scalar.Scalar52)
  (sum : backend.serial.u64.scalar.Scalar52) (carry : U64) (i : Usize) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  if i < 5#usize
  then
    do
    let i1 ←
      backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
        a i
    let i2 ←
      backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
        b i
    let i3 ← i1 + i2
    let i4 ← carry >>> 52#i32
    let carry1 ← i3 + i4
    let (_, index_mut_back) ←
      backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
        sum i
    let i5 ← (↑(carry1 &&& mask) : Result U64)
    let i6 ← i + 1#usize
    let sum1 := index_mut_back i5
    backend.serial.u64.scalar.Scalar52.add_loop mask a b sum1 carry1 i6
  else ok sum
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::add]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 177:4-192:5 -/
def backend.serial.u64.scalar.Scalar52.add
  (a : backend.serial.u64.scalar.Scalar52)
  (b : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  do
  let i ← 1#u64 <<< 52#i32
  let mask ← i - 1#u64
  let sum ←
    backend.serial.u64.scalar.Scalar52.add_loop mask a b
      backend.serial.u64.scalar.Scalar52.ZERO 0#u64 0#usize
  backend.serial.u64.scalar.Scalar52.sub sum backend.serial.u64.constants.L

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::from_bytes_wide]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 100:8-111:9 -/
def backend.serial.u64.scalar.Scalar52.from_bytes_wide_loop
  (bytes : Array U8 64#usize) (words : Array U64 8#usize) (i : Usize) :
  Result (Array U64 8#usize)
  :=
  if i < 8#usize
  then
    do
    let i1 ← i * 8#usize
    let i2 ← Array.index_usize bytes i1
    let i3 ← (↑(UScalar.cast .U64 i2) : Result U64)
    let i4 ← i3 <<< 0#i32
    let i5 ← Array.index_usize words i
    let i6 ← (↑(i5 ||| i4) : Result U64)
    let words1 ← Array.update words i i6
    let i7 ← i1 + 1#usize
    let i8 ← Array.index_usize bytes i7
    let i9 ← (↑(UScalar.cast .U64 i8) : Result U64)
    let i10 ← i9 <<< 8#i32
    let i11 ← Array.index_usize words1 i
    let i12 ← (↑(i11 ||| i10) : Result U64)
    let words2 ← Array.update words1 i i12
    let i13 ← i1 + 2#usize
    let i14 ← Array.index_usize bytes i13
    let i15 ← (↑(UScalar.cast .U64 i14) : Result U64)
    let i16 ← 2#i32 * 8#i32
    let i17 ← i15 <<< i16
    let i18 ← Array.index_usize words2 i
    let i19 ← (↑(i18 ||| i17) : Result U64)
    let words3 ← Array.update words2 i i19
    let i20 ← i1 + 3#usize
    let i21 ← Array.index_usize bytes i20
    let i22 ← (↑(UScalar.cast .U64 i21) : Result U64)
    let i23 ← 3#i32 * 8#i32
    let i24 ← i22 <<< i23
    let i25 ← Array.index_usize words3 i
    let i26 ← (↑(i25 ||| i24) : Result U64)
    let words4 ← Array.update words3 i i26
    let i27 ← i1 + 4#usize
    let i28 ← Array.index_usize bytes i27
    let i29 ← (↑(UScalar.cast .U64 i28) : Result U64)
    let i30 ← 4#i32 * 8#i32
    let i31 ← i29 <<< i30
    let i32 ← Array.index_usize words4 i
    let i33 ← (↑(i32 ||| i31) : Result U64)
    let words5 ← Array.update words4 i i33
    let i34 ← i1 + 5#usize
    let i35 ← Array.index_usize bytes i34
    let i36 ← (↑(UScalar.cast .U64 i35) : Result U64)
    let i37 ← 5#i32 * 8#i32
    let i38 ← i36 <<< i37
    let i39 ← Array.index_usize words5 i
    let i40 ← (↑(i39 ||| i38) : Result U64)
    let words6 ← Array.update words5 i i40
    let i41 ← i1 + 6#usize
    let i42 ← Array.index_usize bytes i41
    let i43 ← (↑(UScalar.cast .U64 i42) : Result U64)
    let i44 ← 6#i32 * 8#i32
    let i45 ← i43 <<< i44
    let i46 ← Array.index_usize words6 i
    let i47 ← (↑(i46 ||| i45) : Result U64)
    let words7 ← Array.update words6 i i47
    let i48 ← i1 + 7#usize
    let i49 ← Array.index_usize bytes i48
    let i50 ← (↑(UScalar.cast .U64 i49) : Result U64)
    let i51 ← 7#i32 * 8#i32
    let i52 ← i50 <<< i51
    let i53 ← Array.index_usize words7 i
    let i54 ← (↑(i53 ||| i52) : Result U64)
    let words8 ← Array.update words7 i i54
    let i55 ← i + 1#usize
    backend.serial.u64.scalar.Scalar52.from_bytes_wide_loop bytes words8 i55
  else ok words
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::from_bytes_wide]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 97:4-132:5 -/
def backend.serial.u64.scalar.Scalar52.from_bytes_wide
  (bytes : Array U8 64#usize) : Result backend.serial.u64.scalar.Scalar52 :=
  do
  let words := Array.repeat 8#usize 0#u64
  let words1 ←
    backend.serial.u64.scalar.Scalar52.from_bytes_wide_loop bytes words 0#usize
  let i ← 1#u64 <<< 52#i32
  let mask ← i - 1#u64
  let i1 ← Array.index_usize words1 0#usize
  let (_, index_mut_back) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      backend.serial.u64.scalar.Scalar52.ZERO 0#usize
  let i2 ← (↑(i1 &&& mask) : Result U64)
  let i3 ← i1 >>> 52#i32
  let i4 ← Array.index_usize words1 1#usize
  let i5 ← i4 <<< 12#i32
  let i6 ← (↑(i3 ||| i5) : Result U64)
  let lo := index_mut_back i2
  let (_, index_mut_back1) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      lo 1#usize
  let i7 ← (↑(i6 &&& mask) : Result U64)
  let i8 ← i4 >>> 40#i32
  let i9 ← Array.index_usize words1 2#usize
  let i10 ← i9 <<< 24#i32
  let i11 ← (↑(i8 ||| i10) : Result U64)
  let lo1 := index_mut_back1 i7
  let (_, index_mut_back2) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      lo1 2#usize
  let i12 ← (↑(i11 &&& mask) : Result U64)
  let i13 ← i9 >>> 28#i32
  let i14 ← Array.index_usize words1 3#usize
  let i15 ← i14 <<< 36#i32
  let i16 ← (↑(i13 ||| i15) : Result U64)
  let lo2 := index_mut_back2 i12
  let (_, index_mut_back3) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      lo2 3#usize
  let i17 ← (↑(i16 &&& mask) : Result U64)
  let i18 ← i14 >>> 16#i32
  let i19 ← Array.index_usize words1 4#usize
  let i20 ← i19 <<< 48#i32
  let i21 ← (↑(i18 ||| i20) : Result U64)
  let lo3 := index_mut_back3 i17
  let (_, index_mut_back4) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      lo3 4#usize
  let i22 ← (↑(i21 &&& mask) : Result U64)
  let i23 ← i19 >>> 4#i32
  let i24 ← (↑(i23 &&& mask) : Result U64)
  let i25 ← i19 >>> 56#i32
  let i26 ← Array.index_usize words1 5#usize
  let i27 ← i26 <<< 8#i32
  let i28 ← (↑(i25 ||| i27) : Result U64)
  let hi := index_mut_back i24
  let (_, index_mut_back5) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      hi 1#usize
  let i29 ← (↑(i28 &&& mask) : Result U64)
  let i30 ← i26 >>> 44#i32
  let i31 ← Array.index_usize words1 6#usize
  let i32 ← i31 <<< 20#i32
  let i33 ← (↑(i30 ||| i32) : Result U64)
  let hi1 := index_mut_back5 i29
  let (_, index_mut_back6) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      hi1 2#usize
  let i34 ← (↑(i33 &&& mask) : Result U64)
  let i35 ← i31 >>> 32#i32
  let i36 ← Array.index_usize words1 7#usize
  let i37 ← i36 <<< 32#i32
  let i38 ← (↑(i35 ||| i37) : Result U64)
  let hi2 := index_mut_back6 i34
  let (_, index_mut_back7) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      hi2 3#usize
  let i39 ← (↑(i38 &&& mask) : Result U64)
  let i40 ← (↑(IScalar.hcast .U32 20#i32) : Result U32)
  massert (i40 < 64#u32)
  let hi3 := index_mut_back7 i39
  let (_, index_mut_back8) ←
    backend.serial.u64.scalar.IndexMutcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index_mut
      hi3 4#usize
  let i41 ← (i36 >>> 20#i32 : Result U64)
  let lo4 := index_mut_back4 i22
  let lo5 ←
    backend.serial.u64.scalar.Scalar52.montgomery_mul lo4
      backend.serial.u64.constants.R
  let hi4 := index_mut_back8 i41
  let hi5 ←
    backend.serial.u64.scalar.Scalar52.montgomery_mul hi4
      backend.serial.u64.constants.RR
  backend.serial.u64.scalar.Scalar52.add hi5 lo5

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::to_bytes]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 137:4-174:5 -/
def backend.serial.u64.scalar.Scalar52.to_bytes
  (self : backend.serial.u64.scalar.Scalar52) : Result (Array U8 32#usize) :=
  do
  let s := Array.repeat 32#usize 0#u8
  let i ← Array.index_usize self 0#usize
  let i1 ← i >>> 0#i32
  let i2 ← (↑(UScalar.cast .U8 i1) : Result U8)
  let s1 ← Array.update s 0#usize i2
  let i3 ← i >>> 8#i32
  let i4 ← (↑(UScalar.cast .U8 i3) : Result U8)
  let s2 ← Array.update s1 1#usize i4
  let i5 ← i >>> 16#i32
  let i6 ← (↑(UScalar.cast .U8 i5) : Result U8)
  let s3 ← Array.update s2 2#usize i6
  let i7 ← i >>> 24#i32
  let i8 ← (↑(UScalar.cast .U8 i7) : Result U8)
  let s4 ← Array.update s3 3#usize i8
  let i9 ← i >>> 32#i32
  let i10 ← (↑(UScalar.cast .U8 i9) : Result U8)
  let s5 ← Array.update s4 4#usize i10
  let i11 ← i >>> 40#i32
  let i12 ← (↑(UScalar.cast .U8 i11) : Result U8)
  let s6 ← Array.update s5 5#usize i12
  let i13 ← i >>> 48#i32
  let i14 ← Array.index_usize self 1#usize
  let i15 ← i14 <<< 4#i32
  let i16 ← (↑(i13 ||| i15) : Result U64)
  let i17 ← (↑(UScalar.cast .U8 i16) : Result U8)
  let s7 ← Array.update s6 6#usize i17
  let i18 ← i14 >>> 4#i32
  let i19 ← (↑(UScalar.cast .U8 i18) : Result U8)
  let s8 ← Array.update s7 7#usize i19
  let i20 ← i14 >>> 12#i32
  let i21 ← (↑(UScalar.cast .U8 i20) : Result U8)
  let s9 ← Array.update s8 8#usize i21
  let i22 ← i14 >>> 20#i32
  let i23 ← (↑(UScalar.cast .U8 i22) : Result U8)
  let s10 ← Array.update s9 9#usize i23
  let i24 ← i14 >>> 28#i32
  let i25 ← (↑(UScalar.cast .U8 i24) : Result U8)
  let s11 ← Array.update s10 10#usize i25
  let i26 ← i14 >>> 36#i32
  let i27 ← (↑(UScalar.cast .U8 i26) : Result U8)
  let s12 ← Array.update s11 11#usize i27
  let i28 ← i14 >>> 44#i32
  let i29 ← (↑(UScalar.cast .U8 i28) : Result U8)
  let s13 ← Array.update s12 12#usize i29
  let i30 ← Array.index_usize self 2#usize
  let i31 ← i30 >>> 0#i32
  let i32 ← (↑(UScalar.cast .U8 i31) : Result U8)
  let s14 ← Array.update s13 13#usize i32
  let i33 ← i30 >>> 8#i32
  let i34 ← (↑(UScalar.cast .U8 i33) : Result U8)
  let s15 ← Array.update s14 14#usize i34
  let i35 ← i30 >>> 16#i32
  let i36 ← (↑(UScalar.cast .U8 i35) : Result U8)
  let s16 ← Array.update s15 15#usize i36
  let i37 ← i30 >>> 24#i32
  let i38 ← (↑(UScalar.cast .U8 i37) : Result U8)
  let s17 ← Array.update s16 16#usize i38
  let i39 ← i30 >>> 32#i32
  let i40 ← (↑(UScalar.cast .U8 i39) : Result U8)
  let s18 ← Array.update s17 17#usize i40
  let i41 ← i30 >>> 40#i32
  let i42 ← (↑(UScalar.cast .U8 i41) : Result U8)
  let s19 ← Array.update s18 18#usize i42
  let i43 ← i30 >>> 48#i32
  let i44 ← Array.index_usize self 3#usize
  let i45 ← i44 <<< 4#i32
  let i46 ← (↑(i43 ||| i45) : Result U64)
  let i47 ← (↑(UScalar.cast .U8 i46) : Result U8)
  let s20 ← Array.update s19 19#usize i47
  let i48 ← i44 >>> 4#i32
  let i49 ← (↑(UScalar.cast .U8 i48) : Result U8)
  let s21 ← Array.update s20 20#usize i49
  let i50 ← i44 >>> 12#i32
  let i51 ← (↑(UScalar.cast .U8 i50) : Result U8)
  let s22 ← Array.update s21 21#usize i51
  let i52 ← i44 >>> 20#i32
  let i53 ← (↑(UScalar.cast .U8 i52) : Result U8)
  let s23 ← Array.update s22 22#usize i53
  let i54 ← i44 >>> 28#i32
  let i55 ← (↑(UScalar.cast .U8 i54) : Result U8)
  let s24 ← Array.update s23 23#usize i55
  let i56 ← i44 >>> 36#i32
  let i57 ← (↑(UScalar.cast .U8 i56) : Result U8)
  let s25 ← Array.update s24 24#usize i57
  let i58 ← i44 >>> 44#i32
  let i59 ← (↑(UScalar.cast .U8 i58) : Result U8)
  let s26 ← Array.update s25 25#usize i59
  let i60 ← Array.index_usize self 4#usize
  let i61 ← i60 >>> 0#i32
  let i62 ← (↑(UScalar.cast .U8 i61) : Result U8)
  let s27 ← Array.update s26 26#usize i62
  let i63 ← i60 >>> 8#i32
  let i64 ← (↑(UScalar.cast .U8 i63) : Result U8)
  let s28 ← Array.update s27 27#usize i64
  let i65 ← i60 >>> 16#i32
  let i66 ← (↑(UScalar.cast .U8 i65) : Result U8)
  let s29 ← Array.update s28 28#usize i66
  let i67 ← i60 >>> 24#i32
  let i68 ← (↑(UScalar.cast .U8 i67) : Result U8)
  let s30 ← Array.update s29 29#usize i68
  let i69 ← i60 >>> 32#i32
  let i70 ← (↑(UScalar.cast .U8 i69) : Result U8)
  let s31 ← Array.update s30 30#usize i70
  let i71 ← i60 >>> 40#i32
  let i72 ← (↑(UScalar.cast .U8 i71) : Result U8)
  Array.update s31 31#usize i72

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::square_internal]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 250:4-269:5 -/
def backend.serial.u64.scalar.Scalar52.square_internal
  (a : backend.serial.u64.scalar.Scalar52) : Result (Array U128 9#usize) :=
  do
  let i ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 0#usize
  let i1 ← i * 2#u64
  let i2 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 1#usize
  let i3 ← i2 * 2#u64
  let i4 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 2#usize
  let i5 ← i4 * 2#u64
  let i6 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 3#usize
  let i7 ← i6 * 2#u64
  let i8 ← backend.serial.u64.scalar.m i i
  let i9 ← Array.index_usize (Array.make 4#usize [ i1, i3, i5, i7 ]) 0#usize
  let i10 ← backend.serial.u64.scalar.m i9 i2
  let i11 ← backend.serial.u64.scalar.m i9 i4
  let i12 ← backend.serial.u64.scalar.m i2 i2
  let i13 ← i11 + i12
  let i14 ← backend.serial.u64.scalar.m i9 i6
  let i15 ← Array.index_usize (Array.make 4#usize [ i1, i3, i5, i7 ]) 1#usize
  let i16 ← backend.serial.u64.scalar.m i15 i4
  let i17 ← i14 + i16
  let i18 ←
    backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
      a 4#usize
  let i19 ← backend.serial.u64.scalar.m i9 i18
  let i20 ← backend.serial.u64.scalar.m i15 i6
  let i21 ← i19 + i20
  let i22 ← backend.serial.u64.scalar.m i4 i4
  let i23 ← i21 + i22
  let i24 ← backend.serial.u64.scalar.m i15 i18
  let i25 ← Array.index_usize (Array.make 4#usize [ i1, i3, i5, i7 ]) 2#usize
  let i26 ← backend.serial.u64.scalar.m i25 i6
  let i27 ← i24 + i26
  let i28 ← backend.serial.u64.scalar.m i25 i18
  let i29 ← backend.serial.u64.scalar.m i6 i6
  let i30 ← i28 + i29
  let i31 ← Array.index_usize (Array.make 4#usize [ i1, i3, i5, i7 ]) 3#usize
  let i32 ← backend.serial.u64.scalar.m i31 i18
  let i33 ← backend.serial.u64.scalar.m i18 i18
  ok (Array.make 9#usize [ i8, i10, i13, i17, i23, i27, i30, i32, i33 ])

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_square]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 332:4-334:5 -/
def backend.serial.u64.scalar.Scalar52.montgomery_square
  (self : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  do
  let a ← backend.serial.u64.scalar.Scalar52.square_internal self
  backend.serial.u64.scalar.Scalar52.montgomery_reduce a

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::as_montgomery]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 338:4-340:5 -/
def backend.serial.u64.scalar.Scalar52.as_montgomery
  (self : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  backend.serial.u64.scalar.Scalar52.montgomery_mul self
    backend.serial.u64.constants.RR

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::from_montgomery]: loop 0:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 348:8-351:9 -/
def backend.serial.u64.scalar.Scalar52.from_montgomery_loop
  (self : backend.serial.u64.scalar.Scalar52) (limbs : Array U128 9#usize)
  (i : Usize) :
  Result (Array U128 9#usize)
  :=
  if i < 5#usize
  then
    do
    let i1 ←
      backend.serial.u64.scalar.Indexcurve25519_dalekbackendserialu64scalarScalar52UsizeU64.index
        self i
    let i2 ← (↑(UScalar.cast .U128 i1) : Result U128)
    let limbs1 ← Array.update limbs i i2
    let i3 ← i + 1#usize
    backend.serial.u64.scalar.Scalar52.from_montgomery_loop self limbs1 i3
  else ok limbs
partial_fixpoint

/- [curve25519_dalek::backend::serial::u64::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::from_montgomery]:
   Source: 'curve25519-dalek/src/backend/serial/u64/scalar.rs', lines 345:4-353:5 -/
def backend.serial.u64.scalar.Scalar52.from_montgomery
  (self : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  do
  let limbs := Array.repeat 9#usize 0#u128
  let limbs1 ←
    backend.serial.u64.scalar.Scalar52.from_montgomery_loop self limbs 0#usize
  backend.serial.u64.scalar.Scalar52.montgomery_reduce limbs1

/- [curve25519_dalek::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::is_negative]:
   Source: 'curve25519-dalek/src/field.rs', lines 150:4-153:5 -/
def field.FieldElement51.is_negative
  (self : backend.serial.u64.field.FieldElement51) : Result subtle.Choice :=
  do
  let bytes ← backend.serial.u64.field.FieldElement51.to_bytes self
  let i ← Array.index_usize bytes 0#usize
  let i1 ← (↑(i &&& 1#u8) : Result U8)
  core.convert.IntoFrom.into core.convert.FromsubtleChoiceU8 i1

/- [curve25519_dalek::edwards::affine::{curve25519_dalek::edwards::affine::AffinePoint}::compress]:
   Source: 'curve25519-dalek/src/edwards/affine.rs', lines 71:4-75:5 -/
def edwards.affine.AffinePoint.compress
  (self : edwards.affine.AffinePoint) : Result edwards.CompressedEdwardsY :=
  do
  let s ← backend.serial.u64.field.FieldElement51.to_bytes self.y
  let c ← field.FieldElement51.is_negative self.x
  let i ← subtle.Choice.unwrap_u8 c
  let i1 ← i <<< 7#i32
  let i2 ← Array.index_usize s 31#usize
  let i3 ← (↑(i2 ^^^ i1) : Result U8)
  let s1 ← Array.update s 31#usize i3
  ok s1

/- [curve25519_dalek::edwards::{curve25519_dalek::edwards::CompressedEdwardsY}::as_bytes]:
   Source: 'curve25519-dalek/src/edwards.rs', lines 189:4-191:5 -/
def edwards.CompressedEdwardsY.as_bytes
  (self : edwards.CompressedEdwardsY) : Result (Array U8 32#usize) :=
  ok self

/- [curve25519_dalek::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::pow22501]:
   Source: 'curve25519-dalek/src/field.rs', lines 170:4-204:5 -/
def field.FieldElement51.pow22501
  (self : backend.serial.u64.field.FieldElement51) :
  Result (backend.serial.u64.field.FieldElement51 ×
    backend.serial.u64.field.FieldElement51)
  :=
  do
  let t0 ← backend.serial.u64.field.FieldElement51.square self
  let fe ← backend.serial.u64.field.FieldElement51.square t0
  let t1 ← backend.serial.u64.field.FieldElement51.square fe
  let t2 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      self t1
  let t3 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      t0 t2
  let t4 ← backend.serial.u64.field.FieldElement51.square t3
  let t5 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      t2 t4
  let t6 ← backend.serial.u64.field.FieldElement51.pow2k t5 5#u32
  let t7 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      t6 t5
  let t8 ← backend.serial.u64.field.FieldElement51.pow2k t7 10#u32
  let t9 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      t8 t7
  let t10 ← backend.serial.u64.field.FieldElement51.pow2k t9 20#u32
  let t11 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      t10 t9
  let t12 ← backend.serial.u64.field.FieldElement51.pow2k t11 10#u32
  let t13 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      t12 t7
  let t14 ← backend.serial.u64.field.FieldElement51.pow2k t13 50#u32
  let t15 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      t14 t13
  let t16 ← backend.serial.u64.field.FieldElement51.pow2k t15 100#u32
  let t17 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      t16 t15
  let t18 ← backend.serial.u64.field.FieldElement51.pow2k t17 50#u32
  let t19 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      t18 t13
  ok (t19, t3)

/- [curve25519_dalek::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::pow_p58]:
   Source: 'curve25519-dalek/src/field.rs', lines 269:4-278:5 -/
def field.FieldElement51.pow_p58
  (self : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let (t19, _) ← field.FieldElement51.pow22501 self
  let t20 ← backend.serial.u64.field.FieldElement51.pow2k t19 2#u32
  backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
    self t20

/- [curve25519_dalek::field::{subtle::ConstantTimeEq for curve25519_dalek::backend::serial::u64::field::FieldElement51}::ct_eq]:
   Source: 'curve25519-dalek/src/field.rs', lines 96:4-98:5 -/
noncomputable def
  field.ConstantTimeEqcurve25519_dalekbackendserialu64fieldFieldElement51.ct_eq
  (self : backend.serial.u64.field.FieldElement51)
  (other : backend.serial.u64.field.FieldElement51) :
  Result subtle.Choice
  :=
  do
  let a ← backend.serial.u64.field.FieldElement51.to_bytes self
  let s ← (↑(Array.to_slice a) : Result (Slice U8))
  let a1 ← backend.serial.u64.field.FieldElement51.to_bytes other
  let s1 ← (↑(Array.to_slice a1) : Result (Slice U8))
  subtle.ConstantTimeEqSlice.ct_eq subtle.ConstantTimeEqU8 s s1

/- [curve25519_dalek::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::sqrt_ratio_i]:
   Source: 'curve25519-dalek/src/field.rs', lines 292:4-338:5 -/
noncomputable def field.FieldElement51.sqrt_ratio_i
  (u : backend.serial.u64.field.FieldElement51)
  (v : backend.serial.u64.field.FieldElement51) :
  Result (subtle.Choice × backend.serial.u64.field.FieldElement51)
  :=
  do
  let fe ← backend.serial.u64.field.FieldElement51.square v
  let v3 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      fe v
  let fe1 ← backend.serial.u64.field.FieldElement51.square v3
  let v7 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      fe1 v
  let fe2 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      u v3
  let fe3 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      u v7
  let fe4 ← field.FieldElement51.pow_p58 fe3
  let r ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      fe2 fe4
  let fe5 ← backend.serial.u64.field.FieldElement51.square r
  let check ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      v fe5
  let correct_sign_sqrt ←
    field.ConstantTimeEqcurve25519_dalekbackendserialu64fieldFieldElement51.ct_eq
      check u
  let fe6 ←
    backend.serial.u64.field.Neg_0_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.neg
      u
  let flipped_sign_sqrt ←
    field.ConstantTimeEqcurve25519_dalekbackendserialu64fieldFieldElement51.ct_eq
      check fe6
  let fe7 ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      fe6 backend.serial.u64.constants.SQRT_M1
  let flipped_sign_sqrt_i ←
    field.ConstantTimeEqcurve25519_dalekbackendserialu64fieldFieldElement51.ct_eq
      check fe7
  let r_prime ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      backend.serial.u64.constants.SQRT_M1 r
  let c ←
    subtle.BitOrsubtleChoicesubtleChoicesubtleChoice.bitor flipped_sign_sqrt
      flipped_sign_sqrt_i
  let r1 ←
    backend.serial.u64.field.ConditionallySelectablecurve25519_dalekbackendserialu64fieldFieldElement51.conditional_assign
      r r_prime c
  let r_is_negative ← field.FieldElement51.is_negative r1
  let r2 ←
    subtle.ConditionallyNegatable.Blanket.conditional_negate
      subtle.ConditionallySelectablecurve25519_dalekbackendserialu64fieldFieldElement51
      core.ops.arith.Neg_0_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51
      r1 r_is_negative
  let was_nonzero_square ←
    subtle.BitOrsubtleChoicesubtleChoicesubtleChoice.bitor correct_sign_sqrt
      flipped_sign_sqrt
  ok (was_nonzero_square, r2)

/- [curve25519_dalek::edwards::decompress::step_1]:
   Source: 'curve25519-dalek/src/edwards.rs', lines 217:4-228:5 -/
noncomputable def edwards.decompress.step_1
  (repr : edwards.CompressedEdwardsY) :
  Result (subtle.Choice × backend.serial.u64.field.FieldElement51 ×
    backend.serial.u64.field.FieldElement51 ×
    backend.serial.u64.field.FieldElement51)
  :=
  do
  let a ← edwards.CompressedEdwardsY.as_bytes repr
  let Y ← backend.serial.u64.field.FieldElement51.from_bytes a
  let YY ← backend.serial.u64.field.FieldElement51.square Y
  let u ←
    backend.serial.u64.field.Sub_0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.sub
      YY backend.serial.u64.field.FieldElement51.ONE
  let fe ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      YY backend.serial.u64.constants.EDWARDS_D
  let v ←
    backend.serial.u64.field.Add0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.add
      fe backend.serial.u64.field.FieldElement51.ONE
  let (is_valid_y_coord, X) ← field.FieldElement51.sqrt_ratio_i u v
  ok (is_valid_y_coord, X, Y, backend.serial.u64.field.FieldElement51.ONE)

/- [curve25519_dalek::edwards::decompress::step_2]:
   Source: 'curve25519-dalek/src/edwards.rs', lines 231:4-248:5 -/
def edwards.decompress.step_2
  (repr : edwards.CompressedEdwardsY)
  (X : backend.serial.u64.field.FieldElement51)
  (Y : backend.serial.u64.field.FieldElement51)
  (Z : backend.serial.u64.field.FieldElement51) :
  Result edwards.EdwardsPoint
  :=
  do
  let a ← edwards.CompressedEdwardsY.as_bytes repr
  let i ← Array.index_usize a 31#usize
  let i1 ← i >>> 7#i32
  let compressed_sign_bit ← subtle.FromsubtleChoiceU8.from i1
  let X1 ←
    subtle.ConditionallyNegatable.Blanket.conditional_negate
      subtle.ConditionallySelectablecurve25519_dalekbackendserialu64fieldFieldElement51
      core.ops.arith.Neg_0_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51
      X compressed_sign_bit
  let fe ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      X1 Y
  ok { X := X1, Y, Z, T := fe }

/- [curve25519_dalek::edwards::{curve25519_dalek::edwards::CompressedEdwardsY}::decompress]:
   Source: 'curve25519-dalek/src/edwards.rs', lines 202:4-210:5 -/
noncomputable def edwards.CompressedEdwardsY.decompress
  (self : edwards.CompressedEdwardsY) : Result (Option edwards.EdwardsPoint) :=
  do
  let (is_valid_y_coord, X, Y, Z) ← edwards.decompress.step_1 self
  let b ←
    core.convert.IntoFrom.into core.convert.FromBoolsubtleChoice
      is_valid_y_coord
  if b
  then do
       let ep ← edwards.decompress.step_2 self X Y Z
       ok (some ep)
  else ok none

/- [curve25519_dalek::edwards::{curve25519_dalek::edwards::EdwardsPoint}::as_projective]:
   Source: 'curve25519-dalek/src/edwards.rs', lines 532:4-538:5 -/
def edwards.EdwardsPoint.as_projective
  (self : edwards.EdwardsPoint) :
  Result backend.serial.curve_models.ProjectivePoint
  :=
  ok { X := self.X, Y := self.Y, Z := self.Z }

/- [curve25519_dalek::field::{curve25519_dalek::backend::serial::u64::field::FieldElement51}::invert]:
   Source: 'curve25519-dalek/src/field.rs', lines 255:4-264:5 -/
def field.FieldElement51.invert
  (self : backend.serial.u64.field.FieldElement51) :
  Result backend.serial.u64.field.FieldElement51
  :=
  do
  let (t19, t3) ← field.FieldElement51.pow22501 self
  let t20 ← backend.serial.u64.field.FieldElement51.pow2k t19 5#u32
  backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
    t20 t3

/- [curve25519_dalek::edwards::{curve25519_dalek::edwards::EdwardsPoint}::to_affine]:
   Source: 'curve25519-dalek/src/edwards.rs', lines 555:4-560:5 -/
def edwards.EdwardsPoint.to_affine
  (self : edwards.EdwardsPoint) : Result edwards.affine.AffinePoint :=
  do
  let recip ← field.FieldElement51.invert self.Z
  let x ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      self.X recip
  let y ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      self.Y recip
  ok { x, y }

/- [curve25519_dalek::edwards::{curve25519_dalek::edwards::EdwardsPoint}::to_montgomery]:
   Source: 'curve25519-dalek/src/edwards.rs', lines 571:4-581:5 -/
def edwards.EdwardsPoint.to_montgomery
  (self : edwards.EdwardsPoint) : Result montgomery.MontgomeryPoint :=
  do
  let U ←
    backend.serial.u64.field.Add0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.add
      self.Z self.Y
  let W ←
    backend.serial.u64.field.Sub_0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.sub
      self.Z self.Y
  let fe ← field.FieldElement51.invert W
  let u ←
    backend.serial.u64.field.Mul0_curve25519_dalekbackendserialu64fieldFieldElement51_a_curve25519_dalekbackendserialu64fieldFieldElement51curve25519_dalekbackendserialu64fieldFieldElement51.mul
      U fe
  let a ← backend.serial.u64.field.FieldElement51.to_bytes u
  ok a

/- [curve25519_dalek::edwards::{curve25519_dalek::edwards::EdwardsPoint}::compress]:
   Source: 'curve25519-dalek/src/edwards.rs', lines 606:4-608:5 -/
def edwards.EdwardsPoint.compress
  (self : edwards.EdwardsPoint) : Result edwards.CompressedEdwardsY :=
  do
  let ap ← edwards.EdwardsPoint.to_affine self
  edwards.affine.AffinePoint.compress ap

/- [curve25519_dalek::edwards::{curve25519_dalek::edwards::EdwardsPoint}::mul_by_pow_2]: loop 0:
   Source: 'curve25519-dalek/src/edwards.rs', lines 1333:8-1337:9 -/
def edwards.EdwardsPoint.mul_by_pow_2_loop
  (k : U32) (s : backend.serial.curve_models.ProjectivePoint) (i : U32) :
  Result backend.serial.curve_models.ProjectivePoint
  :=
  do
  let i1 ← k - 1#u32
  if i < i1
  then
    do
    let r ← backend.serial.curve_models.ProjectivePoint.double s
    let s1 ← backend.serial.curve_models.CompletedPoint.as_projective r
    let i2 ← i + 1#u32
    edwards.EdwardsPoint.mul_by_pow_2_loop k s1 i2
  else ok s
partial_fixpoint

/- [curve25519_dalek::edwards::{curve25519_dalek::edwards::EdwardsPoint}::mul_by_pow_2]:
   Source: 'curve25519-dalek/src/edwards.rs', lines 1328:4-1340:5 -/
def edwards.EdwardsPoint.mul_by_pow_2
  (self : edwards.EdwardsPoint) (k : U32) : Result edwards.EdwardsPoint :=
  do
  massert (k > 0#u32)
  let s ← edwards.EdwardsPoint.as_projective self
  let s1 ← edwards.EdwardsPoint.mul_by_pow_2_loop k s 0#u32
  let cp ← backend.serial.curve_models.ProjectivePoint.double s1
  backend.serial.curve_models.CompletedPoint.as_extended cp

/- [curve25519_dalek::edwards::{curve25519_dalek::edwards::EdwardsPoint}::mul_by_cofactor]:
   Source: 'curve25519-dalek/src/edwards.rs', lines 1323:4-1325:5 -/
def edwards.EdwardsPoint.mul_by_cofactor
  (self : edwards.EdwardsPoint) : Result edwards.EdwardsPoint :=
  edwards.EdwardsPoint.mul_by_pow_2 self 3#u32

/- Trait implementation: [curve25519_dalek::field::{subtle::ConstantTimeEq for curve25519_dalek::backend::serial::u64::field::FieldElement51}]
   Source: 'curve25519-dalek/src/field.rs', lines 92:0-99:1 -/
@[reducible]
noncomputable def subtle.ConstantTimeEqcurve25519_dalekbackendserialu64fieldFieldElement51 :
  subtle.ConstantTimeEq backend.serial.u64.field.FieldElement51 := {
  ct_eq :=
    field.ConstantTimeEqcurve25519_dalekbackendserialu64fieldFieldElement51.ct_eq
}

/- [curve25519_dalek::ristretto::{curve25519_dalek::ristretto::CompressedRistretto}::to_bytes]:
   Source: 'curve25519-dalek/src/ristretto.rs', lines 229:4-231:5 -/
def ristretto.CompressedRistretto.to_bytes
  (self : ristretto.CompressedRistretto) : Result (Array U8 32#usize) :=
  ok self

/- [curve25519_dalek::ristretto::{curve25519_dalek::ristretto::CompressedRistretto}::as_bytes]:
   Source: 'curve25519-dalek/src/ristretto.rs', lines 234:4-236:5 -/
def ristretto.CompressedRistretto.as_bytes
  (self : ristretto.CompressedRistretto) : Result (Array U8 32#usize) :=
  ok self

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::unpack]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1119:4-1121:5 -/
def scalar.Scalar.unpack
  (self : scalar.Scalar) : Result backend.serial.u64.scalar.Scalar52 :=
  backend.serial.u64.scalar.Scalar52.from_bytes self.bytes

/- [curve25519_dalek::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::pack]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1141:4-1145:5 -/
def scalar.Scalar52.pack
  (self : backend.serial.u64.scalar.Scalar52) : Result scalar.Scalar :=
  do
  let a ← backend.serial.u64.scalar.Scalar52.to_bytes self
  ok { bytes := a }

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::reduce]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1125:4-1130:5 -/
def scalar.Scalar.reduce (self : scalar.Scalar) : Result scalar.Scalar :=
  do
  let x ← scalar.Scalar.unpack self
  let xR ←
    backend.serial.u64.scalar.Scalar52.mul_internal x
      backend.serial.u64.constants.R
  let x_mod_l ← backend.serial.u64.scalar.Scalar52.montgomery_reduce xR
  scalar.Scalar52.pack x_mod_l

/- [curve25519_dalek::scalar::{core::ops::index::Index<usize, u8> for curve25519_dalek::scalar::Scalar}::index]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 310:4-312:5 -/
def scalar.Indexcurve25519_dalekscalarScalarUsizeU8.index
  (self : scalar.Scalar) (_index : Usize) : Result U8 :=
  Array.index_usize self.bytes _index

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::from_bytes_mod_order]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 237:4-246:5 -/
def scalar.Scalar.from_bytes_mod_order
  (bytes : Array U8 32#usize) : Result scalar.Scalar :=
  do
  let s ← scalar.Scalar.reduce { bytes }
  let i ← scalar.Indexcurve25519_dalekscalarScalarUsizeU8.index s 31#usize
  let right_val ← i >>> 7#i32
  if 0#u8 = right_val
  then ok s
  else fail panic

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::from_bytes_mod_order_wide]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 250:4-252:5 -/
def scalar.Scalar.from_bytes_mod_order_wide
  (input : Array U8 64#usize) : Result scalar.Scalar :=
  do
  let s ← backend.serial.u64.scalar.Scalar52.from_bytes_wide input
  scalar.Scalar52.pack s

/- [curve25519_dalek::scalar::{subtle::ConstantTimeEq for curve25519_dalek::scalar::Scalar}::ct_eq]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 301:4-303:5 -/
noncomputable def scalar.ConstantTimeEqcurve25519_dalekscalarScalar.ct_eq
  (self : scalar.Scalar) (other : scalar.Scalar) : Result subtle.Choice :=
  do
  let s ← (↑(Array.to_slice self.bytes) : Result (Slice U8))
  let s1 ← (↑(Array.to_slice other.bytes) : Result (Slice U8))
  subtle.ConstantTimeEqSlice.ct_eq subtle.ConstantTimeEqU8 s s1

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::is_canonical]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1134:4-1136:5 -/
noncomputable def scalar.Scalar.is_canonical (self : scalar.Scalar) : Result subtle.Choice :=
  do
  let s ← scalar.Scalar.reduce self
  scalar.ConstantTimeEqcurve25519_dalekscalarScalar.ct_eq self s

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::from_canonical_bytes]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 261:4-265:5 -/
noncomputable def scalar.Scalar.from_canonical_bytes
  (bytes : Array U8 32#usize) : Result (subtle.CtOption scalar.Scalar) :=
  do
  let i ← Array.index_usize bytes 31#usize
  let i1 ← i >>> 7#i32
  let high_bit_unset ← subtle.ConstantTimeEqU8.ct_eq i1 0#u8
  let c ← scalar.Scalar.is_canonical { bytes }
  let c1 ←
    subtle.BitAndsubtleChoicesubtleChoicesubtleChoice.bitand high_bit_unset c
  subtle.CtOption.new ({ bytes } : scalar.Scalar) c1

/- Trait implementation: [curve25519_dalek::scalar::{subtle::ConstantTimeEq for curve25519_dalek::scalar::Scalar}]
   Source: 'curve25519-dalek/src/scalar.rs', lines 300:0-304:1 -/
@[reducible]
noncomputable def subtle.ConstantTimeEqcurve25519_dalekscalarScalar : subtle.ConstantTimeEq
  scalar.Scalar := {
  ct_eq := scalar.ConstantTimeEqcurve25519_dalekscalarScalar.ct_eq
}

/- Trait implementation: [curve25519_dalek::scalar::{core::ops::index::Index<usize, u8> for curve25519_dalek::scalar::Scalar}]
   Source: 'curve25519-dalek/src/scalar.rs', lines 306:0-313:1 -/
@[reducible]
def core.ops.index.Indexcurve25519_dalekscalarScalarUsizeU8 :
  core.ops.index.Index scalar.Scalar Usize U8 := {
  index := scalar.Indexcurve25519_dalekscalarScalarUsizeU8.index
}

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::ZERO]
   Source: 'curve25519-dalek/src/scalar.rs', lines 564:4-564:53 -/
@[global_simps]
def scalar.Scalar.ZERO_body : Result scalar.Scalar :=
  let a := Array.repeat 32#usize 0#u8
  ok { bytes := a }
@[global_simps, irreducible]
def scalar.Scalar.ZERO : scalar.Scalar := eval_global scalar.Scalar.ZERO_body

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::ONE]
   Source: 'curve25519-dalek/src/scalar.rs', lines 567:4-572:6 -/
@[global_simps]
def scalar.Scalar.ONE_body : Result scalar.Scalar :=
  ok
    {
      bytes :=
        (Array.make 32#usize [
          1#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8,
          0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8,
          0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8, 0#u8
          ])
    }
@[global_simps, irreducible]
def scalar.Scalar.ONE : scalar.Scalar := eval_global scalar.Scalar.ONE_body

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::to_bytes]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 691:4-693:5 -/
def scalar.Scalar.to_bytes
  (self : scalar.Scalar) : Result (Array U8 32#usize) :=
  ok self.bytes

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::as_bytes]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 706:4-708:5 -/
def scalar.Scalar.as_bytes
  (self : scalar.Scalar) : Result (Array U8 32#usize) :=
  ok self.bytes

/- [curve25519_dalek::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_invert::square_multiply]: loop 0:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1169:12-1172:13 -/
def scalar.Scalar52.montgomery_invert.square_multiply_loop
  (squarings : Usize) (y : backend.serial.u64.scalar.Scalar52) (i : Usize) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  if i < squarings
  then
    do
    let y1 ← backend.serial.u64.scalar.Scalar52.montgomery_square y
    let i1 ← i + 1#usize
    scalar.Scalar52.montgomery_invert.square_multiply_loop squarings y1 i1
  else ok y
partial_fixpoint

/- [curve25519_dalek::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_invert::square_multiply]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1167:8-1174:9 -/
def scalar.Scalar52.montgomery_invert.square_multiply
  (y : backend.serial.u64.scalar.Scalar52) (squarings : Usize)
  (x : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  do
  let y1 ←
    scalar.Scalar52.montgomery_invert.square_multiply_loop squarings y 0#usize
  backend.serial.u64.scalar.Scalar52.montgomery_mul y1 x

/- [curve25519_dalek::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::montgomery_invert]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1150:4-1205:5 -/
def scalar.Scalar52.montgomery_invert
  (self : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  do
  let _10 ← backend.serial.u64.scalar.Scalar52.montgomery_square self
  let _100 ← backend.serial.u64.scalar.Scalar52.montgomery_square _10
  let _11 ← backend.serial.u64.scalar.Scalar52.montgomery_mul _10 self
  let _101 ← backend.serial.u64.scalar.Scalar52.montgomery_mul _10 _11
  let _111 ← backend.serial.u64.scalar.Scalar52.montgomery_mul _10 _101
  let _1001 ← backend.serial.u64.scalar.Scalar52.montgomery_mul _10 _111
  let _1011 ← backend.serial.u64.scalar.Scalar52.montgomery_mul _10 _1001
  let _1111 ← backend.serial.u64.scalar.Scalar52.montgomery_mul _100 _1011
  let y ← backend.serial.u64.scalar.Scalar52.montgomery_mul _1111 self
  let i ← 123#usize + 3#usize
  let y1 ← scalar.Scalar52.montgomery_invert.square_multiply y i _101
  let i1 ← 2#usize + 2#usize
  let y2 ← scalar.Scalar52.montgomery_invert.square_multiply y1 i1 _11
  let i2 ← 1#usize + 4#usize
  let y3 ← scalar.Scalar52.montgomery_invert.square_multiply y2 i2 _1111
  let y4 ← scalar.Scalar52.montgomery_invert.square_multiply y3 i2 _1111
  let y5 ← scalar.Scalar52.montgomery_invert.square_multiply y4 4#usize _1001
  let y6 ← scalar.Scalar52.montgomery_invert.square_multiply y5 2#usize _11
  let y7 ← scalar.Scalar52.montgomery_invert.square_multiply y6 i2 _1111
  let i3 ← 1#usize + 3#usize
  let y8 ← scalar.Scalar52.montgomery_invert.square_multiply y7 i3 _101
  let i4 ← 3#usize + 3#usize
  let y9 ← scalar.Scalar52.montgomery_invert.square_multiply y8 i4 _101
  let y10 ← scalar.Scalar52.montgomery_invert.square_multiply y9 3#usize _111
  let y11 ← scalar.Scalar52.montgomery_invert.square_multiply y10 i2 _1111
  let i5 ← 2#usize + 3#usize
  let y12 ← scalar.Scalar52.montgomery_invert.square_multiply y11 i5 _111
  let y13 ← scalar.Scalar52.montgomery_invert.square_multiply y12 i1 _11
  let y14 ← scalar.Scalar52.montgomery_invert.square_multiply y13 i2 _1011
  let i6 ← 2#usize + 4#usize
  let y15 ← scalar.Scalar52.montgomery_invert.square_multiply y14 i6 _1011
  let i7 ← 6#usize + 4#usize
  let y16 ← scalar.Scalar52.montgomery_invert.square_multiply y15 i7 _1001
  let y17 ← scalar.Scalar52.montgomery_invert.square_multiply y16 i1 _11
  let i8 ← 3#usize + 2#usize
  let y18 ← scalar.Scalar52.montgomery_invert.square_multiply y17 i8 _11
  let y19 ← scalar.Scalar52.montgomery_invert.square_multiply y18 i8 _11
  let y20 ← scalar.Scalar52.montgomery_invert.square_multiply y19 i2 _1001
  let y21 ← scalar.Scalar52.montgomery_invert.square_multiply y20 i3 _111
  let y22 ← scalar.Scalar52.montgomery_invert.square_multiply y21 i6 _1111
  let y23 ← scalar.Scalar52.montgomery_invert.square_multiply y22 i2 _1011
  let y24 ←
    scalar.Scalar52.montgomery_invert.square_multiply y23 3#usize _101
  let y25 ← scalar.Scalar52.montgomery_invert.square_multiply y24 i6 _1111
  let y26 ←
    scalar.Scalar52.montgomery_invert.square_multiply y25 3#usize _101
  let i9 ← 1#usize + 2#usize
  scalar.Scalar52.montgomery_invert.square_multiply y26 i9 _11

/- [curve25519_dalek::scalar::{curve25519_dalek::backend::serial::u64::scalar::Scalar52}::invert]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1208:4-1210:5 -/
def scalar.Scalar52.invert
  (self : backend.serial.u64.scalar.Scalar52) :
  Result backend.serial.u64.scalar.Scalar52
  :=
  do
  let s ← backend.serial.u64.scalar.Scalar52.as_montgomery self
  let s1 ← scalar.Scalar52.montgomery_invert s
  backend.serial.u64.scalar.Scalar52.from_montgomery s1

/- [curve25519_dalek::scalar::{curve25519_dalek::scalar::Scalar}::invert]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 747:4-749:5 -/
def scalar.Scalar.invert (self : scalar.Scalar) : Result scalar.Scalar :=
  do
  let s ← scalar.Scalar.unpack self
  let s1 ← scalar.Scalar52.invert s
  scalar.Scalar52.pack s1

/- [curve25519_dalek::scalar::clamp_integer]:
   Source: 'curve25519-dalek/src/scalar.rs', lines 1388:0-1393:1 -/
def scalar.clamp_integer
  (bytes : Array U8 32#usize) : Result (Array U8 32#usize) :=
  do
  let i ← Array.index_usize bytes 0#usize
  let i1 ← (↑(i &&& 248#u8) : Result U8)
  let bytes1 ← Array.update bytes 0#usize i1
  let i2 ← Array.index_usize bytes1 31#usize
  let i3 ← (↑(i2 &&& 127#u8) : Result U8)
  let bytes2 ← Array.update bytes1 31#usize i3
  let i4 ← Array.index_usize bytes2 31#usize
  let i5 ← (↑(i4 ||| 64#u8) : Result U8)
  Array.update bytes2 31#usize i5

end curve25519_dalek
